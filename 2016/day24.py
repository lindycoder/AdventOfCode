import unittest
from itertools import combinations, permutations
from textwrap import dedent

import sys
from hamcrest import assert_that, is_
from pypaths import astar


def compute(data):
    ds = DuctSystem(*read_data(data))

    distances = get_distances(ds)

    return min(total_distance(distances, path) for path in ds.get_possible_paths() if path[0] == 0)


def compute2(data):
    ds = DuctSystem(*read_data(data))

    distances = get_distances(ds)

    return min(total_distance(distances, list(path) + [0]) for path in ds.get_possible_paths() if path[0] == 0)


def get_distances(ds):
    two_points_paths = ds.get_locations_permutations()
    distances = {}
    for two_points_path in two_points_paths:
        finder = astar.pathfinder(neighbors=ds.get_neighbors)
        length, path = finder(ds.locations[two_points_path[0]], ds.locations[two_points_path[1]])
        distances[two_points_path] = length
    return distances


class DuctSystem(object):
    def __init__(self, locations, duct_map):
        self.locations = locations
        self.duct_map = duct_map

    def get_neighbors(self, coord):
        possible_neighbors = [
            (coord[0], coord[1] + 1),
            (coord[0], coord[1] - 1),
            (coord[0] + 1, coord[1]),
            (coord[0] - 1, coord[1])
        ]

        return [c for c in possible_neighbors if self.duct_map[c[0]][c[1]] != "#"]

    def get_locations_permutations(self):
        return set(combinations(sorted(self.locations.keys()), 2))

    def get_possible_paths(self):
        return set(permutations(sorted(self.locations.keys()), len(self.locations.keys())))


def total_distance(distances, path):
    total = 0
    for i in range(0, len(path) - 1):
        try:
            total += distances[path[i], path[i + 1]]
        except KeyError:
            total += distances[path[i + 1], path[i]]
    return total


def read_data(data):
    locations = {}
    duct_map = []
    for y, line in enumerate(data.strip().split("\n")):
        duct_map.append([])
        for x, char in enumerate(line):
            duct_map[-1].append(char)
            try:
                locations[int(char)] = (y, x)
            except ValueError:
                pass

    return locations, duct_map


class TotalDistanceTest(unittest.TestCase):
    def test_possible_permutations(self):
        distances = {
            (1, 2): 3,
            (2, 3): 4,
        }

        assert_that(total_distance(distances, (1, 2, 3)), is_(7))

        assert_that(total_distance(distances, (3, 2, 1)), is_(7))


class PermutationsTest(unittest.TestCase):
    def test_possible_permutations(self):
        ds = DuctSystem({
            0: (1, 1),
            1: (0, 2),
            2: (3, 3),
        }, None)

        perms = ds.get_locations_permutations()

        assert_that(perms, is_({
            (0, 1),
            (0, 2),
            (1, 2),
        }))

    def test_possible_paths(self):
        ds = DuctSystem({
            0: (1, 1),
            1: (0, 2),
            2: (3, 3),
        }, None)

        perms = ds.get_possible_paths()

        assert_that(perms, is_({
            (0, 1, 2),
            (0, 2, 1),
            (1, 0, 2),
            (1, 2, 0),
            (2, 1, 0),
            (2, 0, 1)
        }))


class NeighborsTest(unittest.TestCase):
    def test_get_neighbors(self):
        ds = DuctSystem(None, [
            ['#', '#', '.'],
            ['#', '0', '.'],
            ['#', '1', '#']
        ])

        neighbors = ds.get_neighbors((1, 1))

        assert_that(neighbors, is_([
            (1, 2),
            (2, 1)
        ]))


class ReadTest(unittest.TestCase):
    def test_read_data(self):
        locations, duct_map = read_data(dedent("""
            #.1
            #0#
            """))

        assert_that(locations, is_({
            0: (1, 1),
            1: (0, 2),
        }))

        assert_that(duct_map, is_([
            ['#', '.', '1'],
            ['#', '0', '#']
        ]))


class ZComputeTest(unittest.TestCase):
    def test_official(self):
        r = compute(dedent("""
            ###########
            #0.1.....2#
            #.#######.#
            #4.......3#
            ###########
            """))
        assert_that(r, is_(14))

    def test_official2(self):
        r = compute(dedent("""
            ############
            #0.1......2#
            #.########.#
            #.4.......3#
            ############
            """))
        assert_that(r, is_(17))

    def test_official_2(self):
        r = compute2(dedent("""
            ###########
            #0.1.....2#
            #.#######.#
            #4.......3#
            ###########
            """))
        assert_that(r, is_(20))

    def test_official2_2(self):
        r = compute2(dedent("""
            ############
            #0.1......2#
            #.########.#
            #.4.......3#
            ############
            """))
        assert_that(r, is_(22))


puzzle_input = dedent("""
    #######################################################################################################################################################################################
    #.....................#.....#.#.......#.......#...#.....#.#...#.........#...........#...#.........#...#...#...#...#.........#.#.....#.........#.#.#.....#.....#.....#.#.#.............#
    #.#.###.#.###.#.###.#.#.###.#.###.#########.#.#####.#####.#.###.#.#.#.#.###.#.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#.###.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#####.###.#.#.#.#.#.###.#.#.#.#.#.#
    #.........#.......#...#.....#.#.#.#.......#.#.....#...#.....#.....#.....#...............#.#.#...#...#.#.....#.......#.#...#.....#.......#...#.#.#...#2#...#.................#...#.....#
    #.###.#.###.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.#.###.#.###.#.#.#.###.#.#.#.###.#.#.###.#.#####.#.#.#####.#.#.#.#######.#.#####.###.###.###.#.#.#.#.#.#.#.#.###.###.###.###.#.#.#.#.#######
    #.#....1#.....#...#.......#...#.#.#.....#.....#.....................#.#...........#...#.....#.....#.....#.......#.....#.#.......#...........#...#.#...#...#...............#.#.#.#.....#
    #.#.#######.#.#.#.#.#############.#.###.###.###.#.#.#########.#.###.#.#.#.#.#.#.#.#####.#.#.#.###.#.#.#.#.#.#.#.#.#.###.#########.#.#.#############.#######.#.#.#.###.###.###.#####.###
    #.#.#...#.........#.....#.........#.....#.#.#...#...........#...#.........#...#.#.....#.#...............#...#.....#.#.#.............#.....#...#.....#...........#.#.#.....#...#.......#
    #.###.#.#.#.#.#######.#.#.#.#.###.###.#.#.#.#.#.#.#.#####.###.#.#.#.#.#.#######.#.###.#.#.#.###.#.###.#.#.###.#.#.#.#.#.#.#.#.#.#######.#.###.#.###.#.###.#.#.###.#.###.#.#.#.#.#.#.###
    #...#.#.........#.#...#.....#...#.......#.#.#.......#.#.#...#.........#.....#.#...#.#.#...#...#...#.....#.........#.#.....#.......#.....#.......#.#...#...#.....#.....#.......#.#.#...#
    #.#.#.#.#.#.###.#.#.#.#.###.#####.#####.#######.#.###.#.#.#.#####.#.#####.###.#.#.#.#.#.#.###.#.#.#.#####.#.#####.#.###.#####.#.#.#.###.###.###.#.#.#.#####.#.#.#####.#.#######.#.#.###
    #.....#.#.....#.........#.#...#.......#...#.......#.........#...#.#.#.#.......#...#...............#.#...................#.#.#.......#.#.........#....0#...#.#.......#.#.#.#...#.....#.#
    #######.#.#.#.#######.###.#.###.#.#.#.#.#.#.#.#.###.###.#####.#.#.###.#.#.###.#####.#.#.#.#.#####.#.###.###.#.#.#######.#.#.#.#######.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.#####.#.#.#.#
    #.........#...#...#.....#.........#.......#...#...........#.#.#.#...#...#.#...#.#...#.#.#.......#.......#...#.....#.....#.#...#.#.#.#.........#...............#...#.#...........#.....#
    #.#.#.#.#.#####.###.#####.#.#######.#.#.#.#.#.#.#.#####.###.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.###.#.###.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#####.###.###.#.#######.#.###.#.#######
    #.#...#...#...#.....#.#.#.#...#.................#...#...#.#...#...#...#.#.#.#.....#.#.#.....#.#...#.#.......#.#.#...#...#.#...#.....#...#.#...#...#.....#.....#...#.....#.....#.#...#.#
    #.###.###.###.###.#.#.#.#.#.#.#.#.#.###.#.###.#####.#.###.#.###.###.#.#.#.#.#.###.#.###.#####.###.###.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.###.#####.#.###########.#.#.#.###.#.#######.#.#.#
    #..3#.#.......#...#.............#.....#.....#...#...#.#.....#.......#.....#...#.....#.#.#.........#...#.#.........#.....#...............#.........#...#...........#.#.#...#7#.#.....#.#
    ###.#.#.###.#.#.###.#############.###.#.#######.#.#####.#######.#####.#.###.#.#.#.#.#.#.#.#.#.#.#.###.#.#########.#.#.#.#.#.#.###.#.###.#####.#####.###.#.###.#.#.#.#.#.#.#.#.#.###.#.#
    #.#...#.....#.#.#.#.#.#...........................#.......#...#.#.....#.#...#...#.#...#.........#...........#.#.....#.....#...#...#.#.......#.#.#...#...#.#.......#.......#...#.....#.#
    #.#########.#.#.#.#.#.#.#.#####.###.#######.#.#####.#.#.#.#.###.#.#.#.#.#####.#######.#.#####.#.#.#.#####.#.#.#.###.#####.#.#######.#######.###.###.#.#.#.###.###.#.#########.#.#.###.#
    #.#.......#...#.....#.#.......#.#...#.....#...........#.#...........#...#.....#.........#.......#...#.........#.#.....#.#...#.............#.............#...........#.....#...#.#.#.#.#
    #.#.###.#.#.#.#.#.###.###.#####.#.#.#.#.#.###.#.#####.#.#.#.#.###.#####.#######.#.#.#.#.#.#.#.#.#.#.###.#.###.#.#.#.#.#.#.###.#.###.#.###.#######.###.#.#.#.#.###.###.#.#.#.#.#.#.#.###
    #.#.......................#.......#.......#.#.#.......#...........#...#...#.....#.#.#...#...#...#.......#.......#.#.#...#.....#.....#...#...#.....#.#...#...#...........#.....#...#...#
    #.#.###.#####.#.###.#.#.###.#.#.#.#######.#.#####.#.#.###.#.#######.#.#.#.#.#.#.###.#.#.#.#.#.#.#.###.#.###.#.###.###.#######.#.###.###.#.#.#.###.#.###.###.###.#.#.#.#.#.#.#.#.###.#.#
    #...#.....#.........#...#.#.....#...#...#.#.#...#.....#.#.#...#.......#.....#.......#.....#.....#.#.....#...#.#.#.......#...#.#...#.........#...#...........#...#...#...#.....#.#.#.#.#
    #########.###.#####.#.#.#.#.#.###.#.#.###.#.#.#.#.###.#.#.#.#.#.#.###.#.###.#.#####.#######.#.###.#.###.#.#.###.#.#.#####.#######.#.###.#.###.###.#.###.#.#.#.###.#.#######.#.###.#.#.#
    #.#...#...#...#.....#...#.#6......#.#.....#.....#.....#.#...#...#...#.#.....#...#...#...#...#.............#.#...#.......#.#...#...........#.#..5#...#.#.....#...#.....#...#...#.......#
    #.###.#.#.###.###.#.#.#.#.#####.#.#.#####.#.#.###.#.#.#.#.#.#.###.#.#.###.#.#########.###.###.#######.#.#.#.#.#.#.#####.#.#.#.#.#.###.#.###.#####.#.#.#.#.#.#.#.###.#.###.#.###.#.#.#.#
    #.#...#...#...#.........#...#.................#.....#.....#...............#.....#.#...#.....#.......#...#.....#.#.#.......#.............#.#.#.#...#.#...#.#.#...#.....#.......#.......#
    #.###.#.###.###.###.#.#.#.#.#.###.###.#.#.###.###.###############.#####.#.#######.#.#.#.###########.###.#.#.#.#.#.#.#.###.#.#####.#######.###.#.#.#.#.###.#.#.#.#.###.###.###.#.#.###.#
    #...................#...........#.#.#.........#.....#...#...#...#.#.....#.........#...#.#.......#...#...............#.#.................#.....#.....#.#.....#...#...#.#.....#...#.....#
    #.#.#.#.#.###.###.#.###.#.#####.#.#.#########.#.#.###.#.###.#####.#.#.#.#.#.#.#######.#####.#.#.#.###.#.#.###.#####.#.#.#.###.###.###.###.#######.#.#.#.###.#.#.#.#.#.#.#.###.#.#.###.#
    #.#...#.#.#.#.......#.#...#.#.....#.......#.#.#.....#.#.#.......#...#.#.....#.#...#...#.........#.......#.....#.#...#...#.......#.#...#...#.#.........#...#.........#.........#.#.#...#
    ###.#####.#.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#####.###.#.###.#.#.#.#.#.#.#.#######.#.###.#.#####.###.#####.###.#.#.###.#.#.#.###.#.###.#.#.#.#.#####.#.#####.###.#.#.#.###.#####.#.#.#
    #...........#...................#.....#.....#...............#...#.#.....#.......#...#...#...#...#.......#...#...#.....#...#...#...#.....#4#...#...#...#.....#.............#.#...#.....#
    #######################################################################################################################################################################################""")

if __name__ == '__main__':

    if sys.argv[1] == "1":
        result = compute(puzzle_input)
    else:
        result = compute2(puzzle_input)

    print("Result is {}".format(result))
