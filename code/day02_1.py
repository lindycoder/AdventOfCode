import unittest
from textwrap import dedent

from hamcrest import assert_that, is_

U = 'U'
R = 'R'
D = 'D'
L = 'L'


def compute(input):
    numbers = [
        "1", "2", "3",
        "4", "5", "6",
        "7", "8", "9"
    ]

    commands = input.split()

    result = ""
    position = 4
    for command in commands:
        for move in command:
            if move == U:
                if position > 2:
                    position -= 3
            if move == D:
                if position < 6:
                    position += 3
            elif move == R:
                if position not in (2, 5, 8):
                    position += 1
            elif move == L:
                if position not in (0, 3, 6):
                    position -= 1
        result += numbers[position]

    return result


class ComputeTest(unittest.TestCase):
    def test_going_up(self):
        assert_that(compute("U"), is_("2"))
        assert_that(compute("UU"), is_("2"))
        assert_that(compute("LUU"), is_("1"))
        assert_that(compute("RUU"), is_("3"))
        assert_that(compute("DLUUU"), is_("1"))
        assert_that(compute("DUUU"), is_("2"))
        assert_that(compute("DRUUU"), is_("3"))

    def test_going_right(self):
        assert_that(compute("R"), is_("6"))
        assert_that(compute("RR"), is_("6"))
        assert_that(compute("URR"), is_("3"))
        assert_that(compute("DRR"), is_("9"))
        assert_that(compute("LURRR"), is_("3"))
        assert_that(compute("LRRR"), is_("6"))
        assert_that(compute("LDRRR"), is_("9"))

    def test_going_down(self):
        assert_that(compute("D"), is_("8"))
        assert_that(compute("DD"), is_("8"))
        assert_that(compute("LDD"), is_("7"))
        assert_that(compute("RDD"), is_("9"))
        assert_that(compute("ULDDD"), is_("7"))
        assert_that(compute("UDDD"), is_("8"))
        assert_that(compute("URDDD"), is_("9"))

    def test_going_left(self):
        assert_that(compute("L"), is_("4"))
        assert_that(compute("LL"), is_("4"))
        assert_that(compute("ULL"), is_("1"))
        assert_that(compute("DLL"), is_("7"))
        assert_that(compute("RULLL"), is_("1"))
        assert_that(compute("RLLL"), is_("4"))
        assert_that(compute("RDLLL"), is_("7"))

    def test_1(self):
        result = compute(dedent("""
            ULL
            RRDDD
            LURDL
            UUUUD
        """))
        assert_that(result, is_("1985"))


if __name__ == '__main__':
    print("Result is {}".format(compute(dedent("""
            LDUDDRUDRRURRRRDRUUDULDLULRRLLLUDDULRDLDDLRULLDDLRUURRLDUDDDDLUULUUDDDDLLLLLULLRURDRLRLRLLURDLLDDUULUUUUDLULLRLUUDDLRDRRURRLURRLLLRRDLRUDURRLRRRLULRDLUDRDRLUDDUUULDDDDDURLDULLRDDRRUDDDDRRURRULUDDLLRRDRURDLLLLLUUUDLULURLULLDRLRRDDLUDURUDRLRURURLRRDDLDUULURULRRLLLDRURDULRDUURRRLDLDUDDRLURRDRDRRLDLRRRLRURDRLDRUDLURRUURDLDRULULURRLDLLLUURRULUDDDRLDDUDDDRRLRDUDRUUDDULRDDULDDURULUDLUDRUDDDLRRRRRDLULDRLRRRRUULDUUDRRLURDLLUUDUDDDLUUURDRUULRURULRLLDDLLUDLURRLDRLDDDLULULLURLULRDLDRDDDLRDUDUURUUULDLLRDRUDRDURUUDDLRRRRLLLUULURRURLLDDLDDD
            DRURURLLUURRRULURRLRULLLURDULRLRRRLRUURRLRRURRRRUURRRLUDRDUDLUUDULURRLDLULURRLDURLUUDLDUDRUURDDRDLLLDDRDDLUUDRDUDDRRDLDUDRLDDDRLLDDLUDRULRLLURLDLURRDRUDUDLDLULLLRDLLRRDULLDRURRDLDRURDURDULUUURURDLUDRRURLRRLDULRRDURRDRDDULLDRRRLDRRURRRRUURDRLLLRRULLUDUDRRDDRURLULLUUDDRLDRRDUDLULUUDRDDDDLRLRULRLRLLDLLRRDDLDRDURRULLRLRRLULRULDDDRDRULDRUUDURDLLRDRURDRLRDDUDLLRUDLURURRULLUDRDRDURLLLDDDRDRURRDDRLRRRDLLDDLDURUULURULRLULRLLURLUDULDRRDDLRDLRRLRLLULLDDDRDRU
            URUUDUDRDDRDRRRDLLUDRUDRUUUURDRRDUDUULDUDLLUDRRUDLLRDLLULULDRRDDULDRLDLDDULLDDRDDDLRLLDLLRDUUDUURLUDURDRRRRLRRLDRRUULLDLDLRDURULRURULRRDRRDDUUURDURLLDDUUDLRLDURULURRRDRRUUUDRDDLRLRRLLULUDDRRLRRRRLRDRUDDUULULRRURUURURRLRUDLRRUUURUULLULULRRDDULDRRLLLDLUDRRRLLRDLLRLDUDDRRULULUDLURLDRDRRLULLRRDRDLUURLDDURRLDRLURULDLDRDLURRDRLUUDRUULLDRDURLLDLRUDDULLLLDLDDDLURDDUDUDDRLRDDUDDURURLULLRLUDRDDUDDLDRUURLDLUUURDUULRULLDDDURULDDLLD
            LRRLLRURUURRDLURRULDDDLURDUURLLDLRRRRULUUDDLULLDLLRDLUDUULLUDRLLDRULDDURURDUUULRUDRLLRDDDURLRDRRURDDRUDDRRULULLLDLRLULLDLLDRLLLUDLRURLDULRDDRDLDRRDLUUDDLURDLURLUDLRDLDUURLRRUULDLURULUURULLURLDDURRURDRLUULLRRLLLDDDURLURUURLLLLDLLLUDLDLRDULUULRRLUUUUDLURRURRULULULRURDDRRRRDRUDRURDUDDDDUDLURURRDRRDRUDRLDLDDDLURRRURRUDLDURDRLDLDLDDUDURLUDUUDRULLRLLUUDDUURRRUDURDRRUURLUDRRUDLUDDRUUDLULDLLDLRUUDUULLDULRRLDRUDRRDRLUUDDRUDDLLULRLULLDLDUULLDRUUDDUDLLLLDLDDLDLURLDLRUUDDUULLUDUUDRUDLRDDRDLDRUUDUDLLDUURRRLLLLRLLRLLRLUUDULLRLURDLLRUUDRULLULRDRDRRULRDLUDDURRRRURLLRDRLLDRUUULDUDDLRDRD
            DDLRRULRDURDURULLLLRLDDRDDRLLURLRDLULUDURRLUDLDUDRDULDDULURDRURLLDRRLDURRLUULLRUUDUUDLDDLRUUDRRDDRLURDRUDRRRDRUUDDRLLUURLURUDLLRRDRDLUUDLUDURUUDDUULUURLUDLLDDULLUURDDRDLLDRLLDDDRRDLDULLURRLDLRRRLRRURUUDRLURURUULDURUDRRLUDUDLRUDDUDDRLLLULUDULRURDRLUURRRRDLLRDRURRRUURULRUDULDULULUULULLURDUDUDRLDULDRDDULRULDLURLRLDDDDDDULDRURRRRDLLRUDDRDDLUUDUDDRLLRLDLUDRUDULDDDRLLLLURURLDLUUULRRRUDLLULUUULLDLRLDLLRLRDLDULLRLUDDDRDRDDLULUUR
            """))))
