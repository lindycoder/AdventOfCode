#[derive(PartialEq, Eq, Clone, Copy, Debug)]
enum Sign {
    Rock = 1,
    Paper = 2,
    Scissors = 3,
}
static SIGNS_ORDER: [Sign; 3] = [Sign::Paper, Sign::Rock, Sign::Scissors];

#[derive(PartialEq, Eq, Clone, Copy, Debug)]
enum Outcome {
    Lose,
    Draw,
    Win,
}

pub fn version1(input: Option<String>) -> String {
    let data = input.unwrap_or_else(puzzle_input);

    let games = data.split('\n').map(|e| {
        (
            parse(e.chars().next().unwrap()),
            parse(e.chars().nth(2).unwrap()),
        )
    });

    games
        .map(|(opponent, own)| score(opponent, own))
        .sum::<u32>()
        .to_string()
}

pub fn version2(input: Option<String>) -> String {
    let data = input.unwrap_or_else(puzzle_input);
    let games = data.split('\n').map(|e| {
        (
            parse(e.chars().next().unwrap()),
            parse_outcome(e.chars().nth(2).unwrap()),
        )
    });
    games
        .map(|(opponent, outcome)| score(opponent, choose_sign(opponent, outcome)))
        .sum::<u32>()
        .to_string()
}

fn parse(sign: char) -> Sign {
    match sign {
        'A' | 'X' => Sign::Rock,
        'B' | 'Y' => Sign::Paper,
        _ => Sign::Scissors,
    }
}

fn parse_outcome(outcome: char) -> Outcome {
    match outcome {
        'X' => Outcome::Lose,
        'Y' => Outcome::Draw,
        _ => Outcome::Win,
    }
}

fn beats(left: Sign, right: Sign) -> bool {
    right == SIGNS_ORDER[(SIGNS_ORDER.iter().position(|e| e == &left).unwrap() + 1) % 3]
}

fn score(opponent: Sign, own: Sign) -> u32 {
    let base_score = if opponent == own {
        3
    } else if beats(own, opponent) {
        6
    } else {
        0
    };

    base_score + own as u32
}

fn choose_sign(opponent: Sign, outcome: Outcome) -> Sign {
    return if outcome == Outcome::Draw {
        opponent
    } else if outcome == Outcome::Win {
        SIGNS_ORDER[(SIGNS_ORDER.iter().position(|e| e == &opponent).unwrap() + 2) % 3]
    } else {
        SIGNS_ORDER[(SIGNS_ORDER.iter().position(|e| e == &opponent).unwrap() + 1) % 3]
    };
}

#[cfg(test)]
mod tests {
    use crate::day02::{
        beats, choose_sign, parse, parse_outcome, score, version1, version2, Outcome, Sign,
    };

    #[test]
    fn example_v1() {
        let input = "A Y
B X
C Z";
        let result = version1(Some(input.to_string()));
        assert_eq!(result, "15");
    }

    #[test]
    fn parsing() {
        assert_eq!(parse('A'), Sign::Rock);
        assert_eq!(parse('X'), Sign::Rock);
        assert_eq!(parse('B'), Sign::Paper);
        assert_eq!(parse('Y'), Sign::Paper);
        assert_eq!(parse('C'), Sign::Scissors);
        assert_eq!(parse('Z'), Sign::Scissors);
    }

    #[test]
    fn parsing_outcome() {
        assert_eq!(parse_outcome('X'), Outcome::Lose);
        assert_eq!(parse_outcome('Y'), Outcome::Draw);
        assert_eq!(parse_outcome('Z'), Outcome::Win);
    }

    #[test]
    fn beating() {
        assert_eq!(beats(Sign::Rock, Sign::Paper), false);
        assert_eq!(beats(Sign::Rock, Sign::Scissors), true);
        assert_eq!(beats(Sign::Paper, Sign::Rock), true);
        assert_eq!(beats(Sign::Paper, Sign::Scissors), false);
        assert_eq!(beats(Sign::Scissors, Sign::Rock), false);
        assert_eq!(beats(Sign::Scissors, Sign::Paper), true);
    }

    #[test]
    fn scoring() {
        assert_eq!(score(Sign::Rock, Sign::Rock), 1 + 3);
        assert_eq!(score(Sign::Rock, Sign::Paper), 2 + 6);
        assert_eq!(score(Sign::Rock, Sign::Scissors), 3 + 0);
        assert_eq!(score(Sign::Paper, Sign::Rock), 1 + 0);
        assert_eq!(score(Sign::Paper, Sign::Paper), 2 + 3);
        assert_eq!(score(Sign::Paper, Sign::Scissors), 3 + 6);
        assert_eq!(score(Sign::Scissors, Sign::Rock), 1 + 6);
        assert_eq!(score(Sign::Scissors, Sign::Paper), 2 + 0);
        assert_eq!(score(Sign::Scissors, Sign::Scissors), 3 + 3);
    }

    #[test]
    fn choosing() {
        assert_eq!(choose_sign(Sign::Rock, Outcome::Lose), Sign::Scissors);
        assert_eq!(choose_sign(Sign::Rock, Outcome::Draw), Sign::Rock);
        assert_eq!(choose_sign(Sign::Rock, Outcome::Win), Sign::Paper);
        assert_eq!(choose_sign(Sign::Paper, Outcome::Lose), Sign::Rock);
        assert_eq!(choose_sign(Sign::Paper, Outcome::Draw), Sign::Paper);
        assert_eq!(choose_sign(Sign::Paper, Outcome::Win), Sign::Scissors);
        assert_eq!(choose_sign(Sign::Scissors, Outcome::Lose), Sign::Paper);
        assert_eq!(choose_sign(Sign::Scissors, Outcome::Draw), Sign::Scissors);
        assert_eq!(choose_sign(Sign::Scissors, Outcome::Win), Sign::Rock);
    }

    #[test]
    fn example_v2() {
        let input = "A Y
B X
C Z";
        let result = version2(Some(input.to_string()));
        assert_eq!(result, "12");
    }
}

pub fn puzzle_input() -> String {
    String::from(
        "B Y
A Z
A Z
C Z
B Y
B Y
B X
B Z
C Z
B X
B Y
A Z
B Y
B Z
B Y
C Z
B Z
B Y
B Z
C Y
B Y
A Z
B Y
B Y
B Y
C Y
A Z
B Y
B X
A Z
B X
A Z
A Z
B Y
B Y
B X
A Z
B Y
B Z
C X
C X
B Y
B Y
B X
B X
C X
B X
A Z
B Y
B Y
C X
A Z
B Y
B Z
B X
B X
A Z
A X
B Y
B Y
B Z
C Z
B Z
B Z
B Z
A Z
A Z
B X
B X
B Y
B X
B X
C Z
C Z
A Z
A Y
A Z
B Z
A Z
B Y
C X
B X
C X
B Z
B Z
C Z
B Z
B X
C X
A Z
C X
B Z
A Y
C Z
B Y
C Y
B X
A X
B Y
B X
B X
B Z
B Y
A Z
B Z
B Y
B Y
A X
A Z
B X
B X
B X
B X
B Z
B Z
B Y
C X
A Z
A Z
B Y
B Z
B Y
A Z
B Z
A Z
A Z
C X
B Z
A Z
A Z
B Y
B Z
A Z
B Y
B Y
A Z
B Y
C X
B Z
B Y
B X
C X
B X
B X
B X
A Z
A Z
C Y
A Z
B Y
A Z
C X
B Z
B Z
C X
B Y
C X
B X
B X
C X
A Z
B Y
C X
B X
B Y
A Z
B Y
B Y
C X
B Y
C X
A Z
A Z
A Z
B Y
B Y
A X
A Z
A Z
B Y
C X
C Y
B Y
C X
A Z
B X
A Z
A Z
C X
B Y
A Z
B Y
C X
A Z
B X
B Y
A Z
B Y
B X
B X
C X
B Y
C Y
A Z
B Y
B Y
C Y
B Y
C Y
C X
A Y
A Y
B Z
B Y
A Z
B Z
B X
B X
B Y
A Z
B Y
B X
B Y
B Y
C Z
B Y
B Y
A Z
A Z
B Z
A Y
C X
B Y
B Y
B Z
B Z
B Y
C X
B Y
B X
B Z
B Y
B X
B Y
C Z
B Y
B X
A Z
B Z
B Z
A Z
C X
B Y
C Z
A Z
B Y
C Z
B Y
B X
B Y
B X
C Z
B Z
A Z
A Z
A Z
A X
B Z
B Y
B X
B Y
A Z
B Z
C Z
B X
B Z
B Z
A Z
B Y
B X
A Z
A Z
B Y
B X
A Z
A Z
C Z
A Z
C Z
B Y
B Y
B Z
C X
A Z
B X
B Y
B X
B Y
B Y
B X
B Z
B X
C Z
C X
C X
A Z
A Z
B X
B X
A Y
C X
B Y
A Y
B Z
B X
A Z
B X
B Y
B Y
B Y
B Y
A Z
A Z
B Y
B X
C Z
B Z
C X
B Z
B Y
C X
A Z
B Y
A Z
A Z
B Z
B Y
B X
A Z
B X
B Y
A Z
B Z
B X
B X
A Z
C Y
B X
A Z
B X
B Y
C X
B Y
C Z
C X
B Y
B Y
B Y
B X
B Y
B X
A Y
A Z
B Z
B Y
B X
B Z
B Y
C Z
B Y
A Z
B X
A Z
C X
A X
B Z
B Z
C X
A Z
B X
A Z
A Z
B Z
A Z
B Y
B Z
C Z
A Y
A Z
A Z
A Z
C X
B Z
B Z
B Y
B X
B Y
B Y
B Y
B Z
B Y
B Y
A Z
B Z
A Z
C X
B Y
B X
B Y
B X
B Y
B Y
C X
B Y
B Y
B Z
B Y
C X
B Y
B X
B Y
C X
A X
A Z
C Z
B Y
C Z
B X
C Z
C X
C Z
B Y
B Y
C X
C X
B Y
C X
A Y
B Y
B X
B X
B Z
B Y
C Y
C X
B X
B Y
B Z
B X
B Z
B Z
C X
B X
B Y
B Z
B X
C Z
A Y
B Y
B Y
B Y
A Y
C Y
B Y
B Z
B Z
B Y
B Y
B Z
B X
B X
B Y
A Z
C Y
C Z
B Y
B X
B Y
B Y
C X
B Y
C X
A Z
B X
C X
C Z
A Z
A Z
B Y
C X
A Z
A Z
B Y
A Y
B Y
A Z
A Z
B X
C X
A Z
B X
B Z
A Z
A Z
B X
B Y
B X
B Z
B Y
B Y
B Z
C X
C X
B Y
A Z
B X
B X
B Y
B Z
B Y
B X
B Z
B X
B Y
C X
B Y
B Y
C Y
A Z
B Y
B X
B Y
A Z
C X
A Z
A X
B Z
B X
A Z
B Y
B X
B X
A Z
B Y
A Z
B Z
B Y
A Z
B Y
B Y
A Z
B Z
C Z
B Y
B Y
C Y
A Z
B Y
B Y
B Y
B Y
B Z
B Y
B Y
B Y
C X
B Z
B X
A Z
B Z
C X
B Y
B Y
A Z
B Y
B X
A Z
A Z
C Z
B X
B X
B Y
B Z
B Z
B Z
B Y
B Y
B Y
B Y
B Z
B Y
A Z
A Y
A Z
B Y
B Y
A Z
B X
B Y
A Z
C Z
B Z
B Z
B Y
A Z
A Z
B Y
B X
B Z
B X
B Y
B Y
B X
C X
B Z
B X
A Z
B Y
C Z
B X
A Z
C Z
C Z
A Z
B Y
B Y
A Y
B Y
C Z
B X
C X
B Y
B X
B Z
B Y
B Z
B Y
B Y
A Z
B X
B X
A Y
B Z
B X
B Z
A Y
B Z
C X
B X
B X
B Z
B X
C Y
B Y
C X
C X
B Z
B X
C Z
B Z
A Z
C Y
B Y
B Y
B X
B Z
B Y
B Y
B X
C X
B Y
B Y
C Y
B Z
C X
A Z
B X
B X
B Z
B X
B Y
A Z
B Z
B X
A Z
B Y
C X
A Y
A Z
C X
B X
B Z
B X
C X
A Z
B X
B Y
B Y
A Z
B Z
C X
A Z
B Z
C X
B X
A Z
C X
C Z
B Y
B Z
B Y
B X
C Z
B Z
B Z
B Y
A Z
C Z
A Y
B Y
C X
B Y
B Z
A Z
B Z
A Z
B X
C X
B Y
A Z
B Y
B X
C Z
B Z
C X
B Y
B X
C Y
B Y
C X
B Y
B Y
B Y
B Z
B Y
B X
B Y
B Y
A Z
A Z
C X
B Z
B Y
A Z
B X
C X
B Y
B X
A Z
C Z
A Z
B Z
B Y
B X
B Z
B Y
A Z
C X
C Z
A Y
A Z
C X
C Y
C Z
B Y
B X
B Z
B Y
B X
B Y
A Z
B Y
C X
B X
B Y
C Z
B Y
B Y
B Y
B X
B Y
C Z
B X
B Y
B Y
B Z
B X
B X
B Z
B Z
A Z
A Z
C X
B Y
B Y
C X
B Y
B X
A Y
C Z
B Y
B Z
B Y
B Y
A Z
B Y
B Z
B Y
B Z
B X
B Z
B Y
A Z
B X
B Z
B Y
B Y
B Z
B Y
A Z
B X
B Y
B Z
B X
B Y
B X
B X
B Y
B X
C Y
B Z
B Y
B Z
C Y
A Z
B Y
A Z
B X
A Z
A Z
C Z
B X
C Y
A Z
B Z
B Z
B X
B Z
B Y
A Z
B Z
C Z
A Z
C Y
A Z
B Y
A Z
B Y
A Z
B X
A Z
B Z
C X
B Y
B Y
B Y
C X
B Z
C X
A Z
A Z
C X
B Y
B Z
B X
B Y
B X
A Z
B Y
B Y
A Z
B Y
B Z
B Z
B X
B Z
B Y
B X
B Y
B Y
C X
C Z
B Y
B Y
B Y
B Z
B Y
B Y
B Y
A Z
B Y
B X
B Y
B X
B Z
B Y
B X
B X
A Y
B Y
B X
B Y
B Y
B Y
B Z
B X
A Z
B Y
B Y
B Y
A Z
B X
B X
C Z
B Y
B Y
A Z
B Y
B Z
B X
C X
B Y
B Y
C X
C Z
B X
A Z
B Y
B Y
B X
B X
B X
B Y
B Y
A Z
A Z
B Y
B Y
A Z
B Z
A Z
C X
C X
B Y
B Y
A Z
A Z
C Z
B Z
B X
A Z
B X
B Y
B Y
B X
B Y
B Y
C Z
B Y
B X
C Z
C Z
B X
B Y
B Y
B Z
A Z
B Y
B Y
B Y
B X
B X
A Z
A Z
B X
B Y
B Z
B Y
B Z
B Y
B Z
C X
B Y
C X
B Y
B Y
C Y
A Z
B X
C Z
B Y
B Z
B Y
B Y
B Y
C X
B X
B Y
A Z
C Y
B Y
A Z
B Y
B Z
B Z
B Y
B Y
B Y
C X
B Y
A Y
C Y
B X
B X
B X
B X
B Z
B X
B Z
B Y
B Y
A Z
B X
B X
A Z
A Y
B Y
B Z
B Y
C X
B Y
B X
B Z
C X
B Z
B Y
B X
B X
A Z
B Y
B Y
B Y
C X
A X
B X
C X
B X
C X
B X
A X
B Y
B Y
B Y
B Y
B Z
C Y
C X
A Z
B Z
B Z
B Y
B Z
B Y
B Y
B X
B Z
A Z
A Z
B Z
B X
B Z
A Z
B Y
B Y
B Y
B Z
A Y
B X
B Z
B Y
B Y
B Y
B Y
C X
B Z
C X
A Z
A Z
B Z
A Y
C X
B X
B X
C X
A Z
A Z
A Z
B Y
B Z
A X
A X
B Y
C X
A Z
B Z
A Z
B Y
B Y
B X
B X
B Y
C X
B Z
B Y
B X
B X
B Y
B Z
B Y
B Y
B X
B X
B X
B Y
C X
B Y
B Y
B X
B Y
B Y
B X
B X
A Z
C X
B X
A Z
B Y
B Y
B Z
B Y
B X
A Z
C Y
B X
B Z
B Y
C X
A Z
B X
A Z
A Z
B Y
B Z
B Y
A Z
B Y
B Z
A Z
C Z
B Y
B Y
B X
B Z
B Y
B X
B X
B Y
B Z
B X
B Y
C Z
A X
B Y
C X
A X
B X
B X
B Z
A X
B X
B Y
B X
A Z
B Z
C Z
B X
B X
A Z
B X
B X
B Z
B Y
B Y
A Z
B Y
B Y
B X
B X
B X
B Y
A Y
C X
B X
A Z
B X
B Y
C Z
B Y
B Y
A Z
B Y
A Z
B Y
A Z
B Y
B Y
A Z
B X
B X
B Y
B Y
B Y
A Z
B Y
B Y
A Z
B X
A X
A Z
B Y
B X
B Z
B Z
B Y
B Y
C Y
B Y
B Y
B X
B Y
A Z
C X
B Z
B X
B Z
A Z
B Y
B Z
B X
A Z
A Z
C X
B X
A Y
C X
B Z
B Z
C Z
B Z
B Z
C Y
A Z
C Z
A Z
C Z
B Z
B Y
C X
B Y
B X
A Z
C Y
B X
B Y
B Y
B X
B Y
A Z
A Z
B Y
B Z
B Y
C X
B X
B Y
B X
A Z
C X
B Y
B Y
B Y
B Y
C Z
B Y
C Z
A X
C Z
B X
B Y
B Y
B X
B Y
C X
C X
A Z
B Y
B Y
C X
B Z
C Y
B Z
B Z
B Z
B X
B X
B X
B Z
B X
C X
B Y
C X
B X
C Z
B Y
B X
B Z
B Y
B Y
B Y
B Y
B Y
B X
B X
A Z
B Y
B X
B Y
B Y
A Y
B Y
B Y
A Z
A Z
C Z
B X
B Y
B Y
B Z
C Z
C X
A Z
C X
A X
B X
B Z
B Y
A Z
C Z
B Y
C Z
B X
A Z
B X
A Z
B Y
A Y
B Y
B Y
A Z
C X
B X
B Y
A Z
B Z
B Y
B X
B X
C Y
B X
A Z
B Z
A Z
C X
C Y
B Z
B Z
A Z
B X
B Y
B X
C X
B Y
B Y
B X
C X
B X
B Y
B X
B Y
B Z
B Y
B X
B X
A Z
B Y
B Y
C X
C Y
C X
A Z
A Z
B X
B X
B Z
A Z
A Z
C Z
B Z
A X
B X
B Y
B Y
A Z
B Y
B X
B X
B X
B Y
B X
B Y
B Y
B Y
B Y
B Y
B Y
B Z
A Z
B Y
B X
C X
A Y
B Y
B Y
B Z
C Z
B X
C X
B Z
B Y
B Y
B X
B X
B X
A Z
B X
A Y
B Y
B Y
C X
A Z
B Y
C X
B Y
B X
B X
B X
C Z
B X
A Z
B Y
B Y
B Y
A Z
A Z
B X
A Y
B Y
B Y
B Y
B X
B X
B Z
B X
B Z
B X
B Y
A Y
A Z
C Y
B Z
C X
B Z
B Y
B X
A Y
B Y
B X
B Y
B X
C Z
B X
C Z
B Y
B X
B Z
A Y
A Y
C Z
B X
B X
B Y
A Z
B Y
B Z
A Z
B X
B X
B X
B X
B X
B Z
A Z
A Z
C Y
C X
A Z
A Z
C X
B X
B X
B Z
B X
A Z
B Y
B X
B Y
C X
A Z
B Z
C X
B Y
B Y
A Z
B Y
B Y
B X
B Y
C Y
B X
B Z
B Y
A Z
B Z
A Y
B Y
A Z
B X
B Y
A Z
B Y
C Z
B Z
B Y
C X
C X
B X
B Z
B Y
B Z
B Z
B Z
B Z
A Z
B Y
B X
B Z
B Y
B X
A Z
A Z
A Z
B Y
C Y
C Z
B Z
B X
B Y
B Z
B Y
A Z
A Z
C Z
B X
B Y
B Z
B X
A Y
A Y
B Y
A Y
B Z
B Y
A Z
B Y
B Y
B Y
C Z
B X
B Z
B X
B Y
B Y
B Y
C X
B X
B Y
B Z
B X
B Y
B Y
B Y
B X
B X
B X
A Z
B Y
B Y
C X
C X
C X
C X
B Z
A Z
A Z
B Z
B Y
B X
A Z
C Z
B Y
B X
C Z
C X
B X
B Y
B Y
B X
B X
B Y
A Z
B X
B X
B X
B Y
A Y
B X
A Z
B Y
B Y
B Y
C Y
B Z
B X
B Z
C X
B Y
B Z
C X
B X
B X
B Y
B Y
B Y
A Z
A Z
A Z
B Y
B X
C Z
B Z
B Y
B Y
B Y
B Y
B Z
C X
A Z
C Z
B Z
B X
B X
A Z
B X
B Z
A Z
B Y
B Y
A Z
B Y
B Y
C Y
C Z
B X
A Z
B Z
B Y
C Z
C X
B X
A Z
B Y
B Z
B X
A Z
A Z
A Z
B Y
B X
C X
B Z
B Z
B X
B X
B Y
A Z
B X
B X
B Z
A Z
C X
B X
B Y
B Z
A Z
B Y
B Y
B Y
C X
B Z
A Y
A Z
B Z
C X
A Z
A Z
B Y
C X
B Y
B Z
C X
B Y
B Y
A Z
B Z
A Z
C Z
A Z
B X
B Z
A Z
B X
B Y
C Z
A Y
B Y
B Y
B Y
A Z
B Z
A Y
A Z
B Z
B Y
B Y
A Y
B Y
C X
B Z
B Z
A Z
B X
B X
A Z
B Z
C Y
A Z
A Z
B Y
B Z
B X
C Y
B Y
B Y
B Z
B Y
B Z
B X
B X
B Y
B Y
C X
C X
B X
B X
C X
A Z
B Y
C Z
A Z
B X
B Y
B Z
A Z
C Y
A Z
B Z
A Z
C X
C X
B X
B X
B Y
B Y
B Y
B Y
B Z
B X
B Z
C Y
B Y
A Z
B Y
B X
A Y
B Y
B Z
C X
B X
A Z
A Z
B Y
B Y
A Z
C X
B X
B Y
B Y
B Z
A Z
A Z
C Z
A Z
B Y
B Y
B Y
A Z
B Z
B Y
A Z
A Y
B Y
B Y
B Z
A X
A Z
B Z
B X
A Z
B Z
B Y
B Y
B X
A Y
C Y
B Y
B Y
B X
B Z
A Z
B X
B X
B Y
B Y
A Z
B X
C X
B X
B X
A Z
B Y
C X
A Z
B X
C Z
A Z
B Y
B Y
B X
B X
A Z
C Z
B X
B X
B Y
A Z
B Y
B Y
B X
B Y
B X
A Z
B Y
B Z
B X
A Z
B Y
C Z
C X
A Z
A Y
B X
B Z
B Y
B Y
B Y
B Z
B Z
A Y
C X
B X
C X
B Y
B Y
B Z
B Y
C Y
C X
B Z
C X
B Y
B X
B Y
B Y
A Z
B Y
A Z
A Z
A Z
A Z
B Y
A Z
B X
B X
B X
C Z
B Z
C Y
B Y
A Z
B Z
B Y
B Y
B Y
A Z
B Z
C Y
C X
B Y
B Y
B Y
B X
B Y
B Z
A Z
B Y
B Y
C Y
B Z
B X
B Y
B X
B Z
B Y
C Y
C Y
A Z
B X
B X
A Y
B Z
A Z
B Y
B X
B X
B Z
B X
A Z
B Y
C X
C X
B Z
A Z
B Y
B Y
B Y
B Y
B Y
B X
B Y
B Y
B Z
B Z
A X
A Z
A Z
A Z
A Y
C X
B Y
B Z
B X
A Z
B Y
B Y
B X
B Y
B Y
C Y
C Y
B X
A Z
B Y
C X
B Y
A Y
B X
B X
B Y
C X
A Z
B Y
B X
C X
C Z
B Y
B Y
B Y
A Z
B X
A Z
C Z
B Z
B Y
B Y
B X
B Y
B Y
B X
A Z
C X
C Z
B X
B Y
C Y
B X
A Z
B Y
A Z
B Y
A Y
A Z
A Z
B Y
B Y
B Z
C Z
C X
B Y
B Z
B Y
A Z
B Y
B Z
B Y
B X
B Y
B Z
B Y
B Z
C X
B Y
B Y
C Z
A Z
B Y
C X
B X
A Y
B Y
A Z
B Y
B X
B Y
B Y
B X
B X
B X
B Y
B Y
C Z
B Z
C X
C Z
B Y
C X
B X
A Z
B Y
C Z
A Y
B Y
B Y
B Y
C X
B X
B Y
B Y
B Z
C X
B X
B Z
A Z
B X
B Z
B X
A Z
B Y
B Z
C X
B X
C X
B X
B Y
B Z
B Z
B Z
A Z
B Y
B X
B Y
B Y
B X
B Z
B Y
C X
A Z
B Z
B X
A Z
B Y
B Y
B Y
A Z
A Z
C X
B X
A Y
B Y
B Y
B Y
A Z
A Z
A Z
C Y
B Z
A Y
B Y
B X
B X
B Y
C X
B Y
C Z
B Y
A X
B Y
B X
B Y
B X
C Z
B Y
B Z
B X
B Z
A Z
B Y
B X
B Y
A Z
B X
C Y
B X
B Y
B Y
B Y
C X
B Y
B Y
B Y
A Z
B Z
C X
A Z
B Y
C Y
B X
A Z
C Z
B X
B Y
B X
C Z
B X
B Z
C Y
B X
B Y
B X
B Z
B X
B Z
B Y
B Z
B X
A Z
B X
A X
B X
B Y
B Y
B Y
A Z
B Y
B Y
B Z
C X
B Y
B Y
B Y
B X
B X
B X
C Z
B Z
B X
A Z
B Y
B Z
B Y
B Y
B Y
B Y
C X
A Z
B Z
B Y
B Y
B Z
A Z
B Y
B Z
B Y
B Y
C Y
A Z
B Z
C X
B X
C Z
B X
B X
B Y
B Y
A X
B Y
C Z
A Z
B X
C Z
C Z
B X
A Z
B X
C Z
B Z
B Y
B Y
C X
A Z
B X
B Y
B X
B X
B X
B Y
C X
B Z
B Y
B Y
B Y
B X
A Z
A Z
B Y
B Z
B Y
A Z
B Y
B X
A Z
B Z
B Y
B X
B Y
A Y
B Y
B Y
B Y
B Z
B X
B Y
C Z
C X
B Y
C Y
B Z
A Z
A Z
B Y
B Y
A Z
B Z
B Y
B X
A Z
A Z
C X
A Z
C X
A Z
B Y
C X
B X
B X
B Y
A Y
B Y
B Z
B X
B Y
B Y
A Z
B X
B Y
A Z
A Y
A Z
C X
A Z
C X
A X
B Y
B Y
A Z
B X
B Z
B Y
B Y
B Z
B Y
B Y
B X
B Y
C X
C X
B Y
B Y
B X
C Z
C Z
C Z
C X
B Y
C Z
A Z
C Z
B Y
A Z
B Z
B X
A Y
B Y
B Y
B X
B Y
B Y
C X
B Y
A Z
B Y
A Z
C Z
A Z
B Y
B Z
A Z
B X
B X
B Z
B X
B Y
A Z
B Y
C X
A Z
C Z
B X
A Z
B Y
B Y
C Z
B Z
A Z
B Y
B X
B Y
B Z
C Z
A Y
A Z
B X
B X
A Z
C Y
B Y
A X
A Z
B X
B Y
B X
A Z
C X
B Y
B Y
C X
A X
B Y
A Z
A Z
B Y
B Z
B Y
B Y
B Y
B X
B Y
B X
B X
B X
B Y
A Z
C X
A Z
A Z
A X
A Z
B X
B Z
B Y
A Z",
    )
}
