import sys
from itertools import permutations

import pytest
from hamcrest import assert_that, is_

from y2019.intcode import Intcode


def compute(data):
    signals = []
    for seq in permutations(list(range(5)), 5):
        signals.append(pipe(data, seq))

    return max(signals)


def compute2(data):
    signals = []
    for seq in permutations(list(range(5, 10)), 5):
        signals.append(pipe2(data, seq))

    return max(signals)


def pipe(prog, seq):
    runners = [Intcode.from_input(prog, stdin=[v])
               for v in seq]

    signal = 0
    for runner in runners:
        runner.stdin.append(signal)
        runner.run()
        signal = runner.stdout[0]

    return signal


def pipe2(prog, seq):
    runners = [Intcode.from_input(prog, stdin=[v])
               for v in seq]

    signal = 0
    while True:
        for runner in runners:
            runner.stdin.append(signal)
            runner.run()
            signal = runner.stdout.pop(0)

            if runner.is_halted and runner == runners[4]:
                return signal


@pytest.mark.parametrize('prog,seq,expect', [
    ('3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0', (4,3,2,1,0), 43210),
    ('3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0', (0,1,2,3,4), 54321),
    ('3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0', (1,0,4,3,2), 65210),
])
def test_v(prog, seq, expect):
    assert_that(pipe(prog, seq), is_(expect))

@pytest.mark.parametrize('prog,expect', [
    ('3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0', 43210),
    ('3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0', 54321),
    ('3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0', 65210),
])
def test_v_compute(prog, expect):
    assert_that(compute(prog), is_(expect))



@pytest.mark.parametrize('prog,seq,expect', [
    ('3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5', (9,8,7,6,5), 139629729),
    ('3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10', (9,7,8,5,6), 18216),
])
def test_v2(prog, seq, expect):
    assert_that(pipe2(prog, seq), is_(expect))


@pytest.mark.parametrize('prog,seq,expect', [
    ('3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5', (9,8,7,6,5), 139629729),
    ('3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10', (9,7,8,5,6), 18216),
])
def test_v2_compute(prog, seq, expect):
    assert_that(compute2(prog), is_(expect))


puzzle_input = "3,8,1001,8,10,8,105,1,0,0,21,34,59,76,101,114,195,276,357,438,99999,3,9,1001,9,4,9,1002,9,4,9,4,9,99,3,9,102,4,9,9,101,2,9,9,102,4,9,9,1001,9,3,9,102,2,9,9,4,9,99,3,9,101,4,9,9,102,5,9,9,101,5,9,9,4,9,99,3,9,102,2,9,9,1001,9,4,9,102,4,9,9,1001,9,4,9,1002,9,3,9,4,9,99,3,9,101,2,9,9,1002,9,3,9,4,9,99,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,99,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,99"

if __name__ == '__main__':
    if sys.argv[1] == "2":
        result = compute2(puzzle_input)
    else:
        result = compute(puzzle_input)

    print(f"Result is {result}")
