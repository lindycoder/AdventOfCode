import sys
from dataclasses import dataclass, replace, field
from functools import partial, reduce
from operator import mul, add
from typing import Callable, Optional, Tuple, List, Union

import pytest
from hamcrest import assert_that, is_


@dataclass
class LayerSolver:
    precedence: Tuple[Tuple[Union[int, Callable], ...], ...]

    def __call__(self, layer: List):
        for operators in self.precedence:
            i = 1
            while i < len(layer):
                if layer[i] in operators:
                    layer[i - 1:i + 2] = [layer[i](layer[i - 1], layer[i + 1])]
                    i -= 2
                i += 2

        return layer[0]


def resolve(equation, layer_solver):
    stacks = [
        []
    ]

    for token in equation:
        if token == ' ':
            continue

        if token == '*':
            stacks[-1].append(mul)
        elif token == '+':
            stacks[-1].append(add)
        elif token == '(':
            stacks.append([])
        elif token == ')':
            solved = layer_solver(stacks.pop(-1))
            stacks[-1].append(solved)
        else:
            stacks[-1].append(int(token))

    return layer_solver(stacks.pop(-1))


PART1_PRECENCE = (
    (add, mul),
)
PART2_PRECENCE = (
    (add,),
    (mul,),
)


def compute(data, precedence=PART1_PRECENCE):
    resolver = partial(resolve,
                       layer_solver=LayerSolver(precedence=precedence))
    return sum(map(resolver, data.strip().splitlines()))


def compute2(data):
    return compute(data, precedence=PART2_PRECENCE)


@pytest.mark.parametrize('val,expect', [
    ("1 + 2 * 3 + 4 * 5 + 6", 71),
    ("1 + (2 * 3) + (4 * (5 + 6))", 51),
    ("2 * 3 + (4 * 5)", 26),
    ("5 + (8 * 3 + 9 + 3 * 4 * 3)", 437),
    ("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", 12240),
    ("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", 13632),
])
def test_resolve(val, expect):
    assert_that(resolve(val, layer_solver=LayerSolver(PART1_PRECENCE)),
                is_(expect))


@pytest.mark.parametrize('val,expect', [
    ("1 + 2 * 3 + 4 * 5 + 6", 231),
    ("1 + (2 * 3) + (4 * (5 + 6))", 51),
    ("2 * 3 + (4 * 5)", 46),
    ("5 + (8 * 3 + 9 + 3 * 4 * 3)", 1445),
    ("5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))", 669060),
    ("((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2", 23340),
])
def test_advance_resolve(val, expect):
    assert_that(resolve(val, layer_solver=LayerSolver(PART2_PRECENCE)),
                is_(expect))


@pytest.mark.parametrize('val,expect', [
    ("""\
1 + 2 * 3 + 4 * 5 + 6
1 + (2 * 3) + (4 * (5 + 6))    
""", 71 + 51)
])
def test_compute(val, expect):
    assert_that(compute(val), is_(expect))


@pytest.mark.parametrize('val,expect', [
    ("""\
1 + 2 * 3 + 4 * 5 + 6
1 + (2 * 3) + (4 * (5 + 6))    
""", 231 + 51)
])
def test_compute2(val, expect):
    assert_that(compute2(val), is_(expect))


puzzle_input = """\
2 * (9 + 9 * (7 + 8 * 6 + 3 * 5) * 6 * 3) * ((6 + 4 * 3) + 9 + (9 * 8 * 6 * 7 * 8 * 9) * 2 * (6 + 2)) + 6
6 + (7 * (2 + 2 + 5 + 9 + 6)) * (4 * 8 * 8 * 3 * 6) + 7 * 2 * 5
(4 * (6 * 7 * 3) + (6 + 8 + 9)) + (5 * (9 * 3 * 6 + 2))
5 * ((5 * 3 + 2 + 5 * 9) + (4 + 5 + 3 * 4 + 2) * 7 * 2 + 3)
4 + 4 * (9 * (9 + 5 * 4 * 3 + 4) + 8 * 3)
(5 * 4 * 3 * 4 * 3) + 5
8 * 4 + 8 * (2 * 5 * 7 + (2 + 7 + 5 + 7) + 5) + (3 * 9) + 2
6 + (3 + 9 + 3 + 8 + (4 * 5)) * 2 * (5 * 7 + 4 + 3)
8 + 4 + 2 * (8 + (5 * 8) + 8 + 5)
3 + 9 + (3 + (6 * 2 * 8) * 7 + 4 * 9 + 3) + (5 * (8 * 3 + 9) + (2 + 2 * 9 * 5 * 8 * 4) + 5 + (6 * 2)) * (8 * 4) + 9
9 * (2 * 4 + 5 * 7 + (2 * 3)) * 3 + 4
2 + (6 * 4 + 6 * (9 * 9 + 8 * 8 * 9 * 6) * 7 * (5 + 6 + 8)) * 7
(3 + 5) + 5 + 3
7 + 2 + 4 * (9 + 8 + (8 * 3 * 5 + 4) + 7 + 4) + 8
2 + (4 + 9 + 6 + 2) + 5 * 4 * (7 * (2 + 6 + 5 + 2 + 6 + 7)) * 4
((9 + 6 * 8 * 5) + 9 + 9 + 6 * 4 * 2) + (6 * 3 * 3 * 4 * 8) * (6 + (2 + 8) + 8 * 4 + (3 * 4 + 6 * 7 + 4 * 8)) * 8 * 8
(3 * 6 * (4 * 6)) * (3 + 4 * 5 + 6) + 3 + (6 + (9 + 5)) * 5 * 8
(3 + (5 + 6 + 8 + 2 + 5)) * 3
2 + 8 * (6 + (9 * 6 * 6) * 8 + 7) * (6 * 4 * 6 + 2) * 9 + (9 + 5 * 3 + 3 * 9)
(7 * 8 + (9 + 4 * 4) * 8 * 7) * 5
3 + 6 * 8 * 2 + (5 + 3 + 3 * 9)
7 * 3 + 7 + ((9 + 8 + 4 + 2) + 5)
7 * 3 + 8 + (7 * (6 + 9 + 4 * 5 * 3) * 5 + 5 * 8)
6 + ((4 * 6 * 3) * 6) + 9
9 + 3 + (9 + 2 * (6 + 2 * 6 * 4 * 6 + 6) + (3 + 8 + 7 + 6) + 4 + 7) + 2 * (9 * 8 * (2 * 4 * 3 + 5 + 5 + 5) * 3) * 9
(8 + (3 * 8) * (7 * 6 + 4 * 7 + 6 * 7) * 4 + 3 * 3) + 7 + 5 + 7 * 9 * (4 * (7 + 5 * 5 * 3 + 5 * 5) + (7 * 6 + 7 * 3))
4 * 5 * 5 + 7 * (9 + 8 * 2 * 8 + 5 + (3 + 6 + 6 + 8))
4 * 7 + 6 + 4 + 6 * ((9 * 5 + 5 + 2) * (4 * 7 + 4 + 3) + 2)
5 * (9 * (8 * 3) * 8) + 3 + (7 + 6 * 9) * 4 * 2
2 * (5 * 4 + 3 + 9 * 3 * 7) * (7 * 6 * 9 + 7) + 2
(8 + 7 * 9 + 9 * 6) * 9 * 5 + (6 * 9)
(4 * 3 * 7 + 6) + 2 + 5 + 3 + 3 * (8 * 9 + 9 * 3 + 9 + 9)
(6 + 7) + 5 + 9 * 4 + 6 * 8
(2 + 3) + 4
((7 * 5 * 4 * 4) + 3 + 3 * 2) * (9 * 6 + 5 + 3 + 2) + (8 * 8 * 5 * 7) + (8 + (2 * 8 + 8) + 4)
8 * 2 * (4 * 9 * 7 * 9 + 6) * (3 * (3 * 7 * 4 + 7 + 6) + (9 + 8 * 8 + 2) * 3 * 3) * 2 * 7
(3 + (3 + 7 * 2) + 6) + 4 * 9 * 4
((3 + 7 * 4 + 6 * 2 * 8) * 5 + 9 * (7 * 9) + 4 + 4) + 3 * 3 + ((2 * 3 + 6 * 6) * (3 * 3) * 7) * 4 * 3
4 * (8 * 3 * 6 * (5 + 8) * 9 + 3) * (2 * 8 * 3)
2 + ((7 * 8 * 5) + 2 + 2 * (9 + 2 + 3 * 8 + 4 * 4) * 9 * 2) * 5
7 * 6 * 5 + 5 * (9 * (2 + 5 * 3 * 9 * 4 * 6) + 5 * 5 * 5) + 5
4 + 8 + 2 + (7 * 5 * 7)
(3 + 8 * 3 + 4 + (3 * 5 + 4)) * (2 * (8 + 3 + 9 + 5 * 9) * 3) * 8 + 8
5 * 7 + ((6 * 6 * 8 + 7 + 6) + (5 * 7 + 9 * 3) * 3 * (7 * 8) * 4 * (8 * 9 + 7 + 2 * 6)) * 6
2 * 3 * (9 + 4 + (4 + 4)) * 4 * 6
4 * 2 + ((7 + 5) * 2 * 3 + (2 + 8 + 4) * 9)
(4 * 9 + 5 + 4) + 2 * (6 * 7 + 5) * 8
(6 + (6 + 8 + 7 + 2)) * 2
(6 + 2 * 8 + 3 + 6 * 6) + 9 * (6 * 2) * 6 + 5 * 8
((9 + 3 * 6 + 6) + (7 + 2 * 8 + 3 + 3 + 7) * 7) * 3 + 6
7 + (7 + 3 * 8) + 9 + (6 * (8 * 8 * 8) + 6) * 6 + 5
3 * 3 + 9 + ((5 + 5) + 2 * 7) * 8 + 4
9 * 6 * 7 + 9 + (4 * 6 * 6 + 7) * 2
(6 * 3) + 9 + 6 * (5 + 8 * 8 * 4 * 7)
4 + 2 + (6 + 6 * 2) * (6 + 9) + 6 * 9
9 + 7 * (5 * 2 + 7 + 4) * 3 + 9 * 2
(2 * 9) + 3 * 4 * ((4 * 4 * 7 + 5 * 7) * (4 * 4 + 6)) * 8 + 8
(3 * (6 * 9 * 2 * 3 * 6 * 7)) + 3 * (5 * 6 + 8 + 3 * 8) * 6
((7 + 6 * 7 * 5 * 8 * 9) + 7 * (9 * 8 + 8) * 7 * 3) + ((7 * 2 * 4 + 3 * 6) + (6 * 8) * 7 + 9 + 3) + 5 * 7
(4 * (2 * 8 * 2) + 8 + 7 + (2 + 3)) * 4
(2 * (7 * 7 + 6) * 4 + (8 * 7 + 2 * 9 * 3 * 6)) + 2 + 2
2 * (3 * 5 + (4 * 7 * 4 * 2)) * 4 + 9 + 2
(8 * 9 + 5) + 3 + 9
(9 * 6 * 8 + 6 + (9 + 2) + 9) * (5 * 9 + 4) * (7 + 2 + 2 + 9) + 5 * 3 * 3
(5 + 2 + (5 + 6 * 5)) + 7 + (8 * 8 * 8 + (4 + 5)) + (7 * 2 + (6 * 8 * 8 + 8 + 3 * 4) * 6 + (5 + 9 + 8 * 9 * 9))
3 * 5
(5 * 8 * (2 * 7 * 2 * 6)) + 4 + 3
8 * (2 + 6 + 4) + 3 + 6 * 4
5 * 5 * (4 * (3 + 9 * 6 + 8)) + 9
(4 + (6 + 8 * 9) + 4 * 7) + 4
(6 * 9 * 7 * 7 + 4) * 6 + 3
3 * 4 * 2 * 7 + (8 * 7 * 6 + 3 * 2)
9 + (8 * (7 + 9 + 5 * 3 + 9) * 5 * 9 * 5 + 8) + 7 * 6
((4 * 3 + 2 * 7 * 5) + 2 + 4 * 3 * 4) * 4
7 * 9 + 2 * 9 + 8 * 6
7 * (5 + 4 + 9) + 3
7 * (3 * (4 + 4 + 4 * 9))
(2 * (9 + 2 * 3 * 2 * 7)) * 6 * 2
8 * 7 * 4 + 3
(4 * 7 + 3) * 4 + 6 * 8
((4 + 7 * 6 * 8 * 9 + 9) + 3 + 9) * 8 + 2
(5 + 5 + 7 * 8) * 2 + 4 + 6 + 5
7 * 4 + 4
(8 * 3 * 6) * (3 + 6 * (5 * 5 + 4 + 7 + 9) * 9 + 4 * (4 + 8 + 6)) + 6 * 3 + 8
8 + 5 + 6 * (5 + 3 + 9 + 6 * 4 + 6)
9 + 7 + (6 * 3 + 6) * (2 + 3 + (7 + 5) * 5) * 4
8 + 7 * (2 * 6 + (3 * 8 * 3 + 2) + 8 + 9 + (7 + 5 + 5 + 4 * 5)) * 7
4 * 5 * ((4 * 5 + 6 * 4 * 3) * 8)
4 + 9 * (3 * 5 * 3)
(6 + (9 * 9 + 2) * 2 * 7 + 3) * 8 * 2 + 3 * 9
(7 * 5 + 3 + 7) * 6
(2 * (3 + 9 * 5 * 5 + 2 * 8) * (9 * 8 * 3 * 9 * 5 * 4) + 3) + (4 * (6 * 3 * 3)) * 3
9 * (2 + 8 * 4 + (7 * 7 + 7 + 8) + 3) + 4 * (9 + 2 * 8 + (4 * 7 * 3 * 9 * 4 * 9) + 5) * 5 + 7
2 * 7 + (6 * 6 * 9 * 6) + 6 * 7
((9 * 6) * 6 + 6 * 9 + 4 + 6) + 8 + 9 * 5 + 2
3 * 5 + 9 * 6 * (2 + 7 + 7 * (9 * 3 + 6 * 6 * 6 * 9) + 4)
8 + 5 * 5 * 2 * 2 * (3 + 3)
(3 * (3 + 5 + 2 + 4 + 6) + 9 + 6 * 4) + (5 + 5 * 5) + 2
4 + (8 * (6 + 4 + 5 * 6 + 6 + 5) * 5 + 9 * (4 + 7)) * 2 * ((4 + 4 + 2 + 9 + 9 + 3) + 2)
9 * 8 * 9 * 3 + (7 * 9 * 8 * 8 + 8) + 9
4 + (7 * 8 * 9 * 6) + 2 * 9 + 9
6 + ((6 * 9 * 9 + 2) + (7 + 6 * 4 * 7) + 6 + (9 + 5 + 5) * 8) + 9 * (6 * (9 + 2 * 5))
5 * (4 + 4) + 8 + (9 * 4) + 2
9 + 5 * 9 * 4 * (6 + 8 * 3) * 9
(6 + (8 * 2 * 4 + 3)) + 7 + 4 + 2 + 7
(7 * 7 * 8 + 7 + 8) + 3 * 7 * (2 + 8 * 8 + 6) * 7
8 * 6
9 + (4 * (7 + 8 + 7) + 3 + (2 + 6))
(6 * (4 + 4) * 8 + 2 + (2 + 2 * 2) * 3) + 2 + 9
(7 * 8 * 7 * (6 * 7 * 3 * 8) * 8) + 6
(7 + 3) + 7 + 8 + 5 * 5 + (7 * 5 + 3 + 4)
2 + 7 * (5 + 9) + (3 + 3) + 8
7 + 5 * 4 + ((8 + 5 * 7 * 5 * 6 * 9) + 7) * 7 + 2
2 * (4 + 6 * 4)
(2 + (2 * 4 * 6 * 8 * 7) + 7 * 8) + 2 + ((9 * 4 + 8 + 5 + 7) * (3 * 4 + 7 * 9) * 4 + 4 * (3 * 7) * (5 * 4))
(9 * 3 * 5) * 3 + 5 * 7 + 3 + 2
6 + 9 * 7 + 4 * 9
7 * (2 * 3 + (6 * 2 * 6 + 6 * 6 * 8) + 4 * 5) * 3 * 2 * 9
(8 * 5 + 5 * (6 * 4 + 7) * 2) * 2 * (8 * 9)
(8 * (3 + 2) * 2 * 5) * 9 * (9 + 6 * 5 * 4 + (3 * 3 * 3 * 4 + 9 * 9) * (5 * 8 * 8 + 5))
(9 + 5) + (2 + (2 + 2) + 8) * (6 + 7 + 6) + 9 * 5 * (7 + 4 + 7)
9 * 6 * (5 + 2 * 8 * 5 + 7) + (4 * 9 * 6 * 7 + 7) * 4
4 * 6 + 3 + 8 * (5 + 7 * (4 + 6))
2 + (9 * (7 + 8) * 5 * (6 * 9 * 8 + 6 * 8 * 2) * (8 + 9 + 3 * 9 + 9) * 3) * 5
((8 + 6 * 6 * 5 + 7 * 5) * 4 + 2 * 8 + 4 + 5) + 7 + 9
2 + 7 * (2 + 2 * 7 * 6 + 6 + 9) * 9 + 4 * (4 + 8)
(5 * 5 * (3 * 9 * 4) * 6 * 9 * 4) * (6 + 2 + 9 + 6) * 9 * (6 * 4 + 3 + 7 + (9 + 6 + 2 * 4 * 7) + 6) + 9
2 + 7 * 6 * 5 * 9
7 + 7 + (4 + 3 + 6 + (5 * 5 + 6 + 8) + 9 + 3)
(7 + (9 * 7 + 6 * 8 + 5) + 4 * 8 * (6 + 9) * 4) * 4 + 6 * 6
4 + (6 + 5 * 4 + 2) * 9
8 + 6 * 9 + (9 + 3 + 2 + 9 + 8 + 7) * 7 * 2
9 + 9 * 9 * 3 + (6 + 8 * 8 * 3 + (5 + 9 + 3 + 7 + 5) + (4 * 6)) * (8 * 6 + (3 + 4 + 2 + 9 * 5))
((6 + 3 * 6) + (4 + 2 * 5 * 4 * 6 * 7) + 3 * 9) * ((3 * 2 + 3 * 9 + 4 * 8) + 3 + 8 * 7 * 2)
7 + 5 * (5 + (9 + 4) + 9 + 7) * 4 + (2 * 8 * 9 + 2)
4 + (5 * 8 * 2 * 8) + 3 * (5 * 5 * 8 + 8 + 2 + (4 * 9 + 7)) + 9 * 6
6 * (6 * 4 * 3 * 6 + 2 * 8) * 4 * 9 * (5 * 5 * 6 * 8 * 6 + 7)
9 + (3 * 5 * 6) + 5 + 6
(7 + 5 + 5 + (4 + 2 + 3 + 5 * 2 * 9) * 2) * 3 * (3 + 7 * 6 * 6 + 4)
3 + 4 + (9 * 8 + 7 + 6 * 6 + 5)
5 * (9 + 8 + 3 * 2) + 4 * 4 + (6 + (9 + 3 + 4) + (3 + 3 + 4) + 6) * (4 * 8 + 3)
((5 + 9 * 4 * 8 + 9) + 5) + 9
6 + 8 * 2 + 2 * 9 * 7
5 * 6 + 4 * (8 * 4 * (3 + 6 + 9 * 5 + 3 * 4) + 5 + 3 + 3) + 9
5 + 5 + (5 * 8 + 7 + 5 + (7 + 2 * 8 * 3 + 9)) * 2
9 * 4 + 3 * ((8 + 6 * 3) + 3 + (2 * 5 * 8 * 7 * 4)) + (7 * 2 * 2)
(4 * 8 * 2 + 8 + (5 * 4 * 9 + 4)) * ((7 + 3 + 6 * 9 * 7) + 2 * (4 * 2 * 9)) + 2 + (2 + 3 * 7 * 9 + 9)
4 + (3 * (2 + 5 + 3 * 5)) * 5 * (3 + 6 + 5 + 5 * 7 * 3) + 6
(4 + 3 * 3 * 4 + 2) * (2 * 5) + (2 * 7) + 7 * 8
8 + (5 * 9 * (7 * 8) * 9 + 4) * (5 * 9 * 4 + 6) * 5 + 6
7 + (9 * 3 + 2 + (4 * 7) * (4 * 9 * 7)) * 2
(5 * 5 * 3 * 6) * ((9 + 6) * (3 + 5) + (2 * 9) * 4) * 5 * (4 * 4 * 7) + 3
((8 * 4 + 2 + 9 * 9) * 3 + 5 + 2 * 7 + 7) + 6
8 + (2 * (2 * 6 * 6 + 8 * 5 + 6) + 8) * 9 + 5 + 7 * 3
(8 * 5 + 3 * 2) + 7 * 2 * (3 + 2 * 2 * 4 * 9 + 3)
4 + 6 + 2 + 5 + 6 + 5
(9 + 8) + 4 * (7 + 8 + 5 + 9) * 3
9 + ((9 + 6 * 9 * 2) * (8 + 4 * 6 + 7) + 5 + 2 + 8 * 6) * 7 * 6
(3 * 3) + (7 + (2 * 7) + 8 + 6)
8 * 2 + (5 * 8 * 4) * 5 + 3
3 * (2 + 5 + 3 * 5 + (9 + 4 * 5 * 2 + 4 + 2) * 5) + 8 + (5 * (2 * 8 + 6) * (8 * 5 * 6 * 3) * (4 + 3 + 6 * 8 * 4 * 3) * 3) * 5
2 * 2 * 2 + 6 * 8 + ((3 + 9 + 6 * 3 + 9 + 9) * 4 * 5 * 9 + (3 + 7 * 9 * 3))
4 + 7 + 3 + (4 * 2 + 8 + (2 * 5 + 3 + 3 * 6))
9 + (5 + 8) + 3 * 6 * 2
9 * 2 + 7
3 * 6 * 9 + 8 + (3 + 5 * 5 * 7 + 4 + 9)
7 * 7 * 4 * ((4 * 5 + 6 * 7 * 9 + 7) * 8 * 4 + 9 + 3 * (3 * 7 + 9 + 2 + 7)) + 4
(2 * 4) * 9 + ((7 * 3 + 2 + 6) * 4 + 4) + 2
3 * ((8 * 6 + 9 + 7 * 6 + 2) * 8 * 6 * 8 * 3) * ((9 + 4 + 3 + 5 * 8 * 4) + (7 + 9 * 9 + 5 + 4) * 5 + 9 * 3 * (2 * 6))
(2 + 6 + 6) * 3 * 6 * 4 + 5
3 * (5 + 8 * 2) + 8 + (4 * 2 + 3 + 3 * 9 + 5) * (5 + 6 * (9 * 6 + 6) + 2 * 9 + 6) * ((5 + 2 * 3) + 7 * 9 + 3)
9 + (2 * 6 * 7 + 5 * 5 * 2) + (7 + 9) + 4
4 + 5 + 3 * (5 * (7 + 4)) + 9 + (6 + 7 + 7)
((9 * 6 + 5 + 8 * 7 * 2) * 5) + 8 * 8
9 * 2 + 8
(4 * 2 + (7 * 5 * 8 + 6 + 3 + 9) + 9 * 4 + 5) * (3 * 2 + 6) * 4 * ((8 + 3 + 7 + 7 + 2 * 3) + 7 * 4 + (2 + 7 + 7) + 2) + (8 + 7)
7 + (2 + (5 * 9) * 8 + 5 + 4)
2 + 7 * ((8 * 3 * 3) + 3 * 3 + 5 + 8 + 5) * 4 * 8 * 3
(2 + 8 * 5 + 2 * 9) + 8 * (4 + 8) + 4 + 9
2 + (8 + 5) * 4 * 6 + (6 + 6 + 4 + 8 * (7 + 4 + 6)) * 8
6 + (5 + 4 + (3 + 7 * 3 + 5 + 9 + 8) + 2 + 2 * 9)
2 + 7 + 6 * 7 * ((2 + 8 + 7) * (4 + 5 + 2 * 5) * 7 + 3) + 4
(6 + (6 * 4 * 8) + 7) * 9 * ((9 * 7) + 8 + (9 * 9 * 4) * 8 * 2) * (8 + 2 * 5 + 5) + 6 * 2
2 + 5 * 4 + (7 * 4 + 9 * 8 + 5 * 2) * (3 * 8 + (2 + 3 * 6 + 9 + 4 + 3) + 8 * 6) + 8
9 + (7 * (9 * 2 * 9 * 4 * 4) * 7) + (7 * 8 * 3 * 7 * 9) * (5 + (3 * 9 + 8 * 7 * 3) + 2 + (2 + 8 * 8 * 6 + 3) * 6) + 3 * 3
2 + 3 + (7 + 5 * 9) + 3
(3 * 7) * 8 * 5 + 2 * 3
6 * 7 * 5 + 9 + 5 + 3
3 + ((3 * 5 * 6 * 2) * 9 * 8 * 3 * 9) + 7
6 + 8 * 9 * 2 * ((3 + 7 + 3) * (4 * 4)) * 7
(5 * 3 * 7 + 9 + 3) + (3 + 4 * 9 * 4 * 5 * 8) * 2 * (9 + 8 + 4 + 5 + 8)
(7 + (4 + 2 + 6 * 4)) * 7 + 5
(8 + 5 + 5 * 4) + (2 + 6 * (7 * 8 + 6)) * 4 + 5 + (8 + (2 + 8) + 8 + 2) + 4
5 + 3 + 7 + 8 + ((3 + 2 + 3 * 6 * 6 + 3) * 7 * 6 * (3 * 8 * 5 * 8 * 2 * 2) + 2) + 5
9 + (5 * 5 * 4 + 4 + 4 * 5) + 9 + 3 + 8 + 6
7 + ((3 * 6 + 5 + 7 + 3) * 3 + 2 + 9 * 5 + (4 + 8)) * (9 * 6 + 3 + 2) * (4 * 9 + (8 * 9 * 7) + 8) * 9 * 3
9 * 8 + 3 * (2 + 5 + 2) * 5
9 * (2 + (5 + 6 * 2 * 4 + 4 * 4) + (9 + 5 + 7 + 5 * 9))
6 * (8 + 4 + 3 * 3 + (4 * 7)) * 9 * 9 + (9 * 4 + (8 * 8) * (4 * 9 * 7 + 9) * 7) + 7
(4 + (9 + 9 + 6 * 7 * 7) * 4 + 7 * 2 + 3) + 9 + 5 + 4 * 5 + 7
(5 * 3 + 4 + 6 + 4 + (7 + 8 + 6 + 5 + 7 + 9)) + 5
(6 + (7 * 2 * 7 + 2 + 9 + 4) * 7 * 9 + (3 + 4 + 3 + 7 + 2 + 3)) * 7 * 5 * (4 + 3 + (5 + 2)) * (9 + 3 + 9) * 9
7 + 6 * 5 + (7 * 4 * 4) * 4 + 4
6 * (3 * 7 * 3 + 5 * 4 * (5 * 4 + 9 + 8)) * 2 * 4
8 * (8 + 2)
9 + (4 + 3 + 9 * 3) * (7 * 9 * 7 * 7) + (7 * 9 + (7 * 5 * 6) + 9 * 5)
((9 * 6 + 9 + 5 * 5) + 3) + (5 + 4 * 7 * (4 * 8 + 3 + 2 + 3 * 3) * 9)
8 + 7 * ((6 + 7) + 6 + 6 + 8) + ((8 * 7 * 4 * 5) * (3 + 2 * 2 * 6) * (2 + 9 * 4 * 9 + 7 + 9) * 7 * 6) + 8
(8 + 6 + 5 + (5 * 4 * 7 * 4 * 4) * (2 + 8 * 2 + 6 + 4) * 3) * 3 * (9 * 5 + 4 + 3 * 8)
5 + 3
5 + 5 + (6 + 8)
(7 * 9 + 2 * 9 + 9 + 5) * 8
(6 + 2 * 2 * 9 + (4 * 2 + 7 * 8 * 6) + 6) + 7 * 4
4 + (6 + 5 * 4 + 3 + (2 * 4 + 6 + 7) + (6 * 9 * 5 * 6 * 4 + 4)) + 4 * 9 + (3 + 4 * (2 * 5 + 4))
2 + 9 + 2 + (7 * 8 + 4 + (7 + 4) + 5) + 3
(6 + 8) + ((4 * 4 * 2 * 5 * 8 * 8) + 4 * 7 * 8) + 8 + 4 * 8
3 * 4 * 5 + 2
4 * 2 * 7 + (2 * 8 * 6 * 7 + 4)
((3 + 3 * 8) + 6 * 9 + 9 * 8) * ((5 + 4) + 5 * 6) + 4 * 4 + 5
(8 * 5) * 4 * 9 * (3 + 7 * 3) + 4
5 * (9 + 4 * 4 * 7) + 3 * (9 * 9)
2 + 2 * 9 * 4
4 * 8 * 9 * (7 * (9 + 5 * 3 * 6 * 5 + 7) + 4 + 2 * 4)
6 + 8 + 6 * (3 * 7)
((5 + 4) + 3 + 2 + (5 + 9 + 9)) + 5 + 3
9 + (6 * 3) + 5 + 7 + (9 * 9 + 9) * 4
4 * ((4 + 5 * 7 + 3) + (4 * 7 + 4 + 2 + 2) * 2) * 7 * (4 * 7 * 2 + 3 + 3 * 3) + 9 + 8
(6 * 4 + 4 * 8 * 9) * (5 * 8 * 8 * 9 * (4 + 6)) * (8 * 6)
6 * 7 + 6 * 8 + (9 * 3) * 6
8 + 5 + 3 + (7 * 2 * 5 * 2) * (3 * 4 + 5) + 7
6 * 3 * 4 * 2 * (6 * 8 * 6 + 6 * 5 + 8) + 7
9 + (3 * (3 * 9 * 3 + 5 * 7 * 9) * (2 * 3 + 9 + 2 + 8 * 5) * 4 + 6 * 6)
9 + (4 * (3 * 6 + 3 * 4 + 2 + 9) * 7 * 7 + 4 * 9) + 9 + 7 * 2
8 + 6 + 3 + 5 + 3
((4 + 2 + 3 + 7 * 8 + 8) + (2 + 2 + 6 * 4) + 4) + 9 * 5 * 5 + ((4 * 5 * 3 + 7) + 9 + 7)
6 + 8 * (5 * 3 * 8) * (3 + 7)
(6 * 6 * 9 + (3 * 8 + 5 * 4 * 8 + 7) + 9 + 7) + 4 + 3 + 4 + ((9 * 2 + 4 * 7) * 2 * (6 * 3 + 7 + 2 * 5 * 8) + 9 * (8 + 6 + 8 + 2) * 5) * 4
(7 * 5 * 4 + 4 + 8 + 9) * 7 * 8
6 * (8 * 4 * 4 * 6 + 9)
4 * (5 * (9 + 9) + 9 * 7)
4 * 3 + 6 + 2 + 4
4 + (3 * 4) + 7 + 8
2 + (3 + 9 * 8 * 8 + 3 + 3)
7 + 6 * (5 + (7 * 2 + 9 + 7 + 2) + 4 * (5 + 8 * 4) * 4 * 5)
7 * 4 + 7 + 3 * 3
(7 + 4 + 3 + 5 * 5 + 6) * 4 * 4 + 8 + 7 + 3
6 * 8 * 8 * (5 * (6 + 6 * 6 + 9 * 7 + 3) + 4 * (2 + 4))
9 * 6 + 2 * 9 + (5 * (6 * 8) * 3 * 5 + 6 * 3)
8 * 7 + 6 + (6 + 5 + 9 + 2)
6 + 7 * 7 * (6 + 9) + 9
4 + (9 * (7 * 9 + 5 + 4 + 6 + 9) * 5 + (9 * 9 * 4 + 2 * 4 + 3) + 7) + 6 * (5 * 7 + 4)
2 * 5 + 8 * 5 + (8 * (7 + 8 + 7))
(7 + (3 * 9 + 2 * 7 + 6 + 9) * (9 + 9 + 2 * 8 * 4) * 8 + (4 * 2 * 5)) + 3
6 + (5 + 6) * 3 + 3 + (8 * 3 * 3 + 9 * 8 * 8)
5 * 6 + 8 + (8 + 8 * (7 + 7 * 7 * 7 * 5 + 2) + 2 * 3 + 3)
(4 + 5 + 5 + 2) + (8 + 5 + 6 * 7 * 5) * (8 + 3 + 7 + 4 + 9) + 4 * 6 * ((5 * 7 + 6 * 8 + 8 * 8) + (4 * 2 + 4 + 9 + 4 + 5) + (9 * 6 * 9) * 5 * (7 * 6 * 5 * 3 + 7) + (6 + 6 * 9 * 4 * 7 + 5))
((7 * 4 * 8 + 8) * (5 * 6)) + 3 + 7
5 + (9 + 4 + 8 + 6)
7 + (8 * 4 + (8 + 9 + 9 + 6 * 3)) * 7 * 9
8 + 6 * 6 + 9 * 6 * ((7 + 5 + 7 * 8 * 7 + 2) * 2 + (6 + 6 + 7 * 5 * 2) * 2 + (5 + 9 * 4 * 8 * 3))
4 * 2 + 4
5 + (3 * 7) + (2 * (6 + 6) * (7 + 5 + 4))
8 + 8
9 * 5 * (4 * 8 * 2 * 3 + 8)
6 * 3 + (5 + 9 * 2 * 5 + 7) * 4
8 + 4 + 6 + (7 + 3 + 5 + 7) * (9 + (5 * 6 * 3 + 3 * 3) * (4 * 4 * 2 * 6 * 3 * 7) + 4) * 7
(3 * (2 * 4 * 8 * 3 + 5 + 7)) * 4 * (3 + 3 * 5 + (7 * 7 + 4) + 4 * 4) + 3 + (8 * 2 + 6 * 9)
(6 + (8 + 5 + 2 + 8 + 3) * 8) * 9
(2 * 5 * 4 + 8 + (9 * 6 + 8 * 6 + 4)) + 2 + (7 + (8 * 2 * 8) + 2 + 7 + 3 + (7 * 7 * 9 * 5 + 9 * 9)) * 9 + 3 * 7
((8 + 9 + 6 + 2 * 3) + 8 * 4 + (3 * 9 + 2 + 2 + 8)) * 5 * (3 * 4) + 3 + (8 * 8)
(5 + 6 + 7 + 6) * 3 * 7 * 6
(9 + 3 + 3 + 9) * 2 + 3 + 7 + (9 * 7 + (2 + 2 * 4 * 4 * 9 * 3) * 6)
9 * (3 * 4 * 8 * 5 + 5) + (3 * 7 * 5 + (8 + 6) + (4 * 9 + 4) + 3) * 9 + 8 * (9 * (5 * 8 + 6 * 9 + 7 + 9) * 2)
(7 + 5 * (5 * 7 * 8 + 4 * 2 * 3) * 6 * 8) + (6 * (3 * 3) + 9 * (2 + 8) + (8 + 9 + 6 * 7)) + 4 + 4
2 + (5 + 8 * 6 + 3 + 6 + 4) + 4 + (6 * (2 + 2 + 8 * 6 + 3) + 5 + 7 + 5) * 6
3 * (8 + 3 + 3 * 5 + 8) * (9 + 2 * 8 * 3 * 8 * (5 + 9 * 3 * 7 + 7 + 7)) + 7
7 * (8 * 6) + ((8 + 8 * 7 + 6) + 9)
4 + 7 + (2 * (6 * 3) * 7 * 2) + 4 + (9 * 6 + 2)
(8 + 8 * 2 * 2 * (8 * 8 * 2 * 5) * 2) * 3 + (6 + 9 * 4)
9 + 3 * 6 + 5 * 2 + (7 + 3 + 3 * 3)
9 + 4 * 2 * 8
8 + 7 * (4 * 2) + 5 * 4 * 7
2 + (6 * 7 * 6 + 3) + 2 * 2
(5 + (6 + 2 * 9 * 2) + 5) * ((6 + 6 + 8 * 3) * 3)
4 + (7 + 2 * 5 + (3 + 8) * 9)
6 + 7 + 8 * 4 + 7 * (9 * 3 * 5 + 9 + 4 + 7)
2 * 5 * ((4 * 3 + 6 + 8 + 2) * 3) + 3 + (6 + (6 * 7 + 9) + (4 * 6 * 4 + 3 + 2) * 9 + 4)
7 + 5 + (2 * 7 * 8 * 3 * 2) * 4 * 6 * 9
3 * 2 * 5 + (6 * (9 + 4 + 7) * 3) * 8 + 7
5 + 5 + 3 + ((3 + 3 * 5 * 8) + (2 + 6 + 3 + 4 * 5 * 4) + 8 * (9 + 2 + 5 + 9 + 3)) + 4
(4 + 8 + 5) * 7 + (9 + 8 * 7 + 6) + 3
3 * (9 * 8 + (9 * 3 + 2) * 3 * 3 + 4) * 2 + 8 * 4
(7 + 2 + 7) + ((7 * 2 * 5 + 3) * 3 * 3 + 5 * 7) * ((4 * 7 + 3 * 7) * 2 * 7 + 3 + (3 + 4 * 6 * 9 + 9 * 9)) * 4 + 3
((5 * 8 + 6) + 7 * 2 + 4 * 8) + 3
8 * (3 + 3 * 6 * 2 * 4) * ((3 * 6 * 2 + 5 + 8 * 3) * 4) + 2 + 3
6 * 5 * (7 + 3 * 3 * 3 + 7) + (9 * 3 * (3 * 9 * 5 * 7 * 4 * 2) * 4 * 2) * 5
9 * 8 + 7 + 7
(6 * 9 * (8 + 2) + 7 * 8 * 6) + 9
(2 + 6 + 3 * (9 + 3 + 7 * 2 * 6) + 4 * (4 * 6 + 2)) + 3 + 6 + 3 + 9 * 7
2 * ((7 * 7 + 9) * 2 * 7) + ((7 + 5 + 4) + 4 * 2 + 3 + 7) + 4
9 + 6 * 4 + 4 + 5 + 6
2 + (2 * (7 * 5 + 5 + 4) * 4 + 6) * 3 + 9
(7 * 7 + (8 + 8 * 4 * 5 + 4) * 3 + (9 + 2)) * 2 * 8 * 5 * 8 * 8
(7 * 9 * (2 + 6 * 3)) + 2 + 4
8 + 9 + (7 * 7 * 2 * 5 + 7 + 2) + (4 + 3 * 3 + (9 * 7 * 5 + 9))
((7 + 2 + 2 * 5 * 4) + 2 * (4 + 8 + 3) + 7 * (8 * 9) + 9) + (5 + 8 * 6) * 5 + 2 + 2
(4 + 2 * 6 + 5 + 8) + 5 + 6 + 5 * (2 + (5 + 5) * 3 + 8 * 3 + (6 + 5 * 2 * 8)) * 9
8 * 7 + (2 + 6 * (7 * 6) + 5) + 8 + 4 + 3
(9 + 3 + 9 + 8 + 6 * 5) * 8 + 8 * 7
(5 * (6 + 4)) * 6 + 2 * (7 * 8) + 5 * 7
(3 + (8 * 3 * 5 + 3 * 7 + 2) * 4 * (3 * 3)) * (6 + 9 + (2 * 5 * 5 * 3 * 7 + 4) * (3 + 7 + 2 + 2) * 7)
(4 + 7 + (9 + 6 * 9 + 7) + 5 + 2) * 4 * 9 + (9 * 7)
((7 + 6 + 9 * 5 + 9 + 7) + 4 * 3 + 9 * (6 * 4 * 9 + 6 * 2 * 9)) * 5
2 * ((7 + 8 + 5 * 6 + 9 * 2) + 8) + 2 + 7
(5 * 8 * (3 * 2) + (5 * 5 + 4 * 4 * 7) * 9 * 3) * 3
8 * 5 + 3 * (4 * (2 + 8 + 2 * 8 + 9) + 5 * 9 + 8 + 6) * (2 + (9 * 2 + 9 * 7 + 8)) + 3
9 * (8 + 9 * 7 * 4 + 7) + 3 + (6 * 2 + 6 * 9 + 9 * 9)
3 + 5 + (4 + 2) * 3
3 * (6 + 7 + 6 + 9 + 6) * 5 + 5 * 3 * (9 + 2)
((9 * 4) + 8 + 8 * 6) + 3 + 6 * (5 + 9)
5 + 2 + (9 * 9 + 9 * 2 + (6 * 8 + 2 + 9 * 6)) * (2 * 5 * (4 * 4) * 8 * 3)
9 * 9 + 8 + 9 + (2 * 3)
6 + 2 * 7 + 5 + (8 * 9 * 5 * (7 * 6)) * (2 * 2)
5 * 9 + (7 + (2 * 3)) + ((8 * 4) + 5 + 7) * (6 * 8 * 7 * 2 * 6 + 9) * (2 + 7 * 7 + 3 + 2)
(8 * (4 + 7 + 4) * (7 + 5 + 4 * 6 + 9) + (9 * 4 + 9 * 4 * 8 * 3) + 5) * 3 + (9 + 2 + 5) + 3 + 7 * 6
7 + (6 * (8 * 9 + 5 + 8) + (9 * 8 * 2) * 3 + 4 + 2) * 4 + 9
2 + (7 + 3) * 9
9 + 3 + (5 + 8 * 7 * 2 + 2) + 2 + 7 + (8 + (7 + 2 + 6) * 4 + 2 * 7)
(9 * 8) + (6 * (8 + 5 * 9) + 3 * 4 * 9) + 6 + 5 + 9
(8 * 4 + 8 * 9 * 7 * (6 + 4 + 8 * 7 + 7 + 6)) * 6 * 4
((4 * 7 * 2) + 4) * 2
4 * 3 + ((2 * 7 + 9 * 7 * 5 + 8) * 4 * 4) + 9
8 + (4 + (3 + 4 * 7 * 7 * 7)) * 2 + 3
(9 * 9 + (6 + 8)) * 6 + 4 * 5
((8 * 8 * 2) * (2 * 9 * 7 + 7 * 4) * 5 * 3 * 7 * 5) + 6 * 8 + (3 * 5 + 8 + 9 * 8) * 8 * 6
5 * (2 + 9 * 9 + 5 * (9 + 5 * 2)) + 7 * (4 + 8 * 8 * (6 * 9 + 4 * 6 * 7)) * 5 * (4 + (4 + 3 + 6) + 8 + 2)
(8 * (3 + 7 * 7 * 2 * 7) * 3) + 2 * (5 * 8 * 6 * (4 * 9 * 4 + 3 + 9 * 4) + 2)
7 * 8 + 9 * ((4 + 7) + (5 + 5 + 8))
5 + 9 + 4 * (8 + 9 + (4 * 9 * 9) * 5 * (8 * 5 + 9 + 5 * 5) * 6) * 6 * 9
(8 * 5) + 9 * 5 + 5
8 * 4 * 9 * ((2 * 9) + (2 + 4))
(6 * 3 + 5 + 9 + 5 * 7) + 2 + 7 + ((4 * 7 + 8 * 3) + 8 * 8 * 6 * (2 * 9 + 2 * 9 * 6 + 6)) * 7
(8 * 2 + 8 + 5) + 6 + 3 * (8 + (5 + 2) + 2 * 9 * 4) * 2 * 4
(8 + (8 * 8 + 6) * 3 + (6 * 8 * 6 * 9 * 6 * 9) + 7) + 8 + 7
6 + 8 + (4 * 5 + 9 * 4 * 7 + 9) * 4
3 + (2 + (2 + 6 + 3 * 8 + 9 * 8) * (2 * 4) * 8) * ((8 * 7 + 2 * 3 + 2 * 3) * 7 + 7 + 7 + 4) + 8
(8 + 8 + 2) * ((2 + 4 + 3 * 3 * 7) + 8) + 4
4 + (7 + 2 + 8 * (2 + 3 * 6 * 9 * 9 * 8) + 6) * 4 + 6 + 2 + 2
(6 + (8 * 9 + 6 * 8)) + 7 * 7 + 2
(7 + 6 + 7) * 2 * 9 + (3 + 9 * (3 * 4) + 3 + 7 * 8)
7 + 5 * 6 * (3 * 6 * 2 + 8 * 4) + 2
9 * ((5 * 9) * 3 + 5 + 4)
(9 * 3) + 5 + 5 + 9 + (6 + 5 + (2 * 7 * 6 + 8) * 8)
9 + 5 + 4 + (3 + 4 + 8 * 3) * 4
4 * ((2 * 7 * 6 + 8) + 9 + (4 * 8 + 2 * 2) * 5 * 9) * 7
6 + (7 * 5 + (8 + 4)) * 8 * 2 + 3 + 8
((3 + 9 + 9 + 9) + 5) * (7 + 7 + 6 + 2 + 2) * 6 + 5
(5 * 4 + 4 * 8 + 7) + 8 * 3 + 6
(2 * 3 + 5) + 4
9 * (7 * (3 * 3 * 6)) + (8 * (9 * 2 + 2 * 6))
7 * 3 * 4
9 * 3 + ((7 + 7 + 2 + 9 * 3) + 5 * 4) * (9 * 9 * 2) + 6
3 + 8 + ((3 * 3 + 9 * 6 + 2) + 9 + 5 * 6 * 8) + 6 + 5
2 * (2 + 8 + 8 + 7 * 8 * 6) + 8 * 4 + (2 * 6) + 5
(6 * (8 * 4 * 5 * 3 * 6)) * 2 + 4 + ((2 + 2 * 9 * 9 * 7) + 6) + 7 + 5
3 * (6 + 9 + 6 + 4 * (4 * 5 + 3 + 3) + (5 + 9 + 7 + 3)) + (7 * 3 * (5 * 3 * 3 * 5) + 5 + (3 * 7 + 4 * 6)) * 7
5 + (9 * 2 * 2 + 4 * 4) + 5
3 * (5 + 2) + 4 + ((7 + 6 + 6 * 8 + 8 + 6) * 7)
(9 + 3 * (5 * 4 + 8 * 5 + 7 + 2) * 4) * 9 + (2 + (2 + 2 * 9 + 7 * 9) + 8) * 9 + 2
(2 + 7 * 8 + (8 + 8 + 5 * 9 * 5 * 6) * 3 + 7) * 7 * 4 * 6 + 9 * (6 + 6 * 5)
3 + 3 * (6 + 5 * 9) * (2 * (3 * 3) + 6 + (5 * 5 + 8)) * 9
2 * (5 + 7 + 5 + (7 * 7 * 4 + 3 + 4 * 7) * 7 + 8) + 2 * 2
(4 * 4) + (6 * (6 * 3 * 7 * 2 * 7)) * (2 + 2 + 6 + 4)
5 * 3 * (4 + 4 * (3 * 9) * 6 * 4) + (8 * 5 + (6 + 2 + 8 * 9 * 9 + 7)) * 4 * 7
5 * (6 + 5 * (9 * 5 * 7 * 3) + (5 * 6) + 4)
((5 + 4 * 5) * 5) + 9 * 7 + 8 * 4 * 9
8 + 9
"""

if __name__ == '__main__':
    if sys.argv[1] == "2":
        result = compute2(puzzle_input)
    else:
        result = compute(puzzle_input)

    print(f"Result is {result}")
