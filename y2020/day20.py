import re
from collections import defaultdict
from dataclasses import dataclass, replace
from functools import reduce
from operator import mul
from typing import Generator, Tuple

import pytest
import sys
from hamcrest import assert_that, has_properties, is_

from lib.maps import Map
from lib.point import Directions, Point
from lib.rectangle import Rectangle

BORDERS = {
    Directions.UP: ('top_left', 'top_right'),
    Directions.RIGHT: ('top_right', 'bottom_right'),
    Directions.DOWN: ('bottom_right', 'bottom_left'),
    Directions.LEFT: ('bottom_left', 'top_left'),
}


@dataclass(frozen=True)
class Image:
    number: int
    borders: Tuple[str]
    data: Map

    @classmethod
    def from_raw(cls, raw: str) -> 'Image':
        title, content = raw.split('\n', maxsplit=1)
        number = re.match(r'^Tile (\d+):$', title).group(1)
        image_data = Map.from_input(content, features=('#', '.'))

        borders = []
        for att_a, att_b in BORDERS.values():
            a, b = getattr(image_data, att_a), getattr(image_data, att_b)
            borders.append(
                ''.join(image_data[p] for p in (a, *list(a.raytrace(b)), b,)),
            )
            borders.append(
                ''.join(image_data[p] for p in (b, *list(b.raytrace(a)), a,)),
            )

        return cls(int(number), tuple(borders), image_data)

    def get_border(self, direction):
        att_a, att_b = BORDERS[direction]
        a, b = getattr(self.data, att_a), getattr(self.data, att_b)
        return ''.join(self.data[p] for p in (a, *list(a.raytrace(b)), b,))

    def __hash__(self):
        return self.number

    def __str__(self):
        return self.data.__str__().split('\n', maxsplit=1)[1]


def compute(data):
    images = list(map(Image.from_raw, data.strip().split('\n\n')))

    all_borders = group_by_borders(images)

    edges = defaultdict(lambda: 0)
    for images in all_borders.values():
        if len(images) == 1:
            edges[images[0].number] += 1

    corners = [num for num, cnt in edges.items() if cnt == 4]

    return reduce(mul, corners, 1)


def flip(image):
    new_features = {
        Point(p.x, image.data.rect.height - p.y): v
        for p, v in image.data.features.items()
    }

    return replace(image, data=replace(image.data, features=new_features))


def rot(image):
    new_features = {
        p + Point(image.data.rect.width - p.x - p.y,
                  image.data.rect.height - p.y - image.data.rect.width + p.x): v
        for p, v in image.data.features.items()
    }

    return replace(image, data=replace(image.data, features=new_features))


transforms = [
    [],
    [rot],
    [rot] * 2,
    [rot] * 3,
    [flip],
    [flip, rot],
    [flip] + [rot] * 2,
    [flip] + [rot] * 3,
]


def all_transforms(image) -> Generator[Image, None, None]:
    for seq in transforms:
        new_image = image
        for transform in seq:
            new_image = transform(new_image)
        yield new_image


SERPENT = Map.from_input("""\
                  # 
#    ##    ##    ###
 #  #  #  #  #  #   """, features=('#',))


def compute2(data):
    images = list(map(Image.from_raw, data.strip().split('\n\n')))

    all_borders = group_by_borders(images)

    pairs = find_pairs(all_borders)

    corners = [k for k, v in pairs.items() if len(v) == 2]

    closest_corners = find_top_and_left_sides(corners, pairs)

    full_map, height, width = start_map_from_sides(closest_corners)

    fill_map(full_map, height, width, pairs)

    arrange_with_transformations(full_map, height, width)

    final_image = get_final_image(full_map, height, width)

    serpent = SERPENT

    for version in all_transforms(final_image):
        rough = remove_serpents(version, serpent)

        if rough != version.data.features:
            return sum(1 for f in rough.values() if f == '#')

    return None


def remove_serpents(version, serpent):
    rough = version.data.features.copy()
    for y in range(version.data.rect.height - serpent.rect.height - 1):
        for x in range(version.data.rect.width - serpent.rect.width - 1):
            offset = Point(x, y)
            if all(rough[offset + p] == '#' for p in
                   serpent.features.keys()):
                for p in serpent.features.keys():
                    rough[offset + p] = '.'
    return rough


def get_final_image(full_map, height, width):
    chunks_size = full_map[Point(0, 0)].data.rect.width - 1
    image_parts = {}
    for y in range(height):
        for x in range(width):
            img = full_map[Point(x, y)]
            for i_y in range(1, img.data.rect.height):
                for i_x in range(1, img.data.rect.width):
                    writing_at = Point(x * chunks_size + i_x - 1,
                                       y * chunks_size + i_y - 1)
                    # print(writing_at)
                    image_parts[writing_at] = img.data[Point(i_x, i_y)]
    final_image = Image(0, tuple(), Map(image_parts,
                                        Rectangle.by_size(chunks_size * width,
                                                          chunks_size * height)))
    return final_image


def arrange_with_transformations(full_map, height, width):
    for y in range(height - 1):
        for x in range(width - 1):
            current = Point(x, y)
            image = full_map[current]
            for current_version in all_transforms(image):
                sync_with = {
                    Directions.DOWN: full_map[current + Directions.DOWN],
                    Directions.RIGHT: full_map[current + Directions.RIGHT],
                }

                result = {}
                for direction, other_image in sync_with.items():
                    border_to_match = ''.join(
                        reversed(current_version.get_border(direction)))
                    for other_version in all_transforms(other_image):
                        if other_version.get_border(
                                direction.opposite) == border_to_match:
                            result[direction] = other_version
                            break

                if len(result) == len(sync_with):
                    full_map[current] = current_version
                    for direction, other_version in result.items():
                        full_map[current + direction] = other_version
    last = Point(width - 1, height - 1)
    image = full_map[last]
    for version in all_transforms(image):
        directions = [Directions.UP, Directions.LEFT]
        matching = 0
        for direction in [Directions.UP, Directions.LEFT]:
            border_to_match = ''.join(reversed(version.get_border(direction)))
            if full_map[last + direction].get_border(
                    direction.opposite) == border_to_match:
                matching += 1
        if matching == len(directions):
            full_map[last] = image
            break


def fill_map(full_map, height, width, pairs):
    placed = set(full_map.values())
    for y in range(1, height):
        for x in range(1, width):
            current = Point(x, y)
            relatives = [full_map[current + Directions.LEFT],
                         full_map[current + Directions.UP]]
            for image, matching in pairs.items():
                if image not in placed and all(
                        r in matching for r in relatives):
                    full_map[current] = image
                    placed.add(image)
                    break


def start_map_from_sides(closest_corners):
    full_map = {}
    size = defaultdict(lambda: 0)
    for edge, direction in zip(closest_corners,
                               [Directions.RIGHT, Directions.DOWN]):
        current = Point(0, 0)
        for img in edge:
            full_map[current] = img
            current += direction
            size[direction] += 1
    width = size[Directions.RIGHT]
    height = size[Directions.DOWN]
    return full_map, height, width


def find_top_and_left_sides(corners, pairs):
    path_checking = [
        [corners[0]]
    ]
    closest_corners = []
    while path_checking:
        path = path_checking.pop(0)
        if path[-1] in corners[1:]:
            closest_corners.append(path)
            if len(closest_corners) == 2:
                break
        for next_image in pairs[path[-1]]:
            if next_image not in path:
                path_checking.append(path + [next_image])
    return closest_corners


def find_pairs(all_borders):
    matches = defaultdict(set)
    for images in all_borders.values():
        if len(images) == 2:
            matches[images[0]].add(images[1])
            matches[images[1]].add(images[0])
    return matches


def group_by_borders(images):
    all_borders = defaultdict(list)
    for image in images:
        for border in image.borders:
            all_borders[border].append(image)
    return all_borders


def test_from_raw():
    raw = """\
Tile 2311:
#..
###
..."""
    image = Image.from_raw(raw)
    assert_that(image, has_properties(
        number=2311,
        borders=('#..', '..#', '.#.', '.#.', '...', '...', '.##', '##.'),
    ))


def test_flip():
    raw = """\
Tile 2311:
#..
###
..."""
    image = flip(Image.from_raw(raw))

    assert_that(str(image), is_("""\
...
###
#.."""))


def test_rot():
    raw = """\
Tile 2311:
#..
###
..."""
    image = rot(Image.from_raw(raw))

    assert_that(str(image), is_("""\
.##
.#.
.#."""))


@pytest.mark.parametrize('val,expect', [
    ("""\
Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...
""", 20899048083289)
])
def test_compute(val, expect):
    assert_that(compute(val), is_(expect))


@pytest.mark.parametrize('val,expect', [
    ("""\
Tile 2311:
..##.#..#.
##..#.....
#...##..#.
####.#...#
##.##.###.
##...#.###
.#.#.#..##
..#....#..
###...#.#.
..###..###

Tile 1951:
#.##...##.
#.####...#
.....#..##
#...######
.##.#....#
.###.#####
###.##.##.
.###....#.
..#.#..#.#
#...##.#..

Tile 1171:
####...##.
#..##.#..#
##.#..#.#.
.###.####.
..###.####
.##....##.
.#...####.
#.##.####.
####..#...
.....##...

Tile 1427:
###.##.#..
.#..#.##..
.#.##.#..#
#.#.#.##.#
....#...##
...##..##.
...#.#####
.#.####.#.
..#..###.#
..##.#..#.

Tile 1489:
##.#.#....
..##...#..
.##..##...
..#...#...
#####...#.
#..#.#.#.#
...#.#.#..
##.#...##.
..##.##.##
###.##.#..

Tile 2473:
#....####.
#..#.##...
#.##..#...
######.#.#
.#...#.#.#
.#########
.###.#..#.
########.#
##...##.#.
..###.#.#.

Tile 2971:
..#.#....#
#...###...
#.#.###...
##.##..#..
.#####..##
.#..####.#
#..#.#..#.
..####.###
..#.#.###.
...#.#.#.#

Tile 2729:
...#.#.#.#
####.#....
..#.#.....
....#..#.#
.##..##.#.
.#.####...
####.#.#..
##.####...
##..#.##..
#.##...##.

Tile 3079:
#.#.#####.
.#..######
..#.......
######....
####.#..#.
.#...#.##.
#.#####.##
..#.###...
..#.......
..#.###...
""", 273)
])
def test_compute2(val, expect):
    assert_that(compute2(val), is_(expect))


puzzle_input = """\
Tile 3593:
#..#.##...
.#..#.#...
.#####..#.
.......#.#
#...#.....
..#.....##
.#....#...
.#..#.....
..#......#
#.####.##.

Tile 3041:
####.#.###
#..#..#.#.
.......#.#
#.....#...
....#....#
.#.......#
#..#.....#
#...#.....
##........
##.##...##

Tile 3761:
...#..##.#
#....#..#.
........#.
#..##.....
#..#.....#
.#....#..#
#.#....#..
#....#....
.....#...#
#.#####..#

Tile 1307:
...#######
#......#..
........#.
#.#......#
#........#
..........
#....#....
#..#..#..#
...#.##...
.....##.#.

Tile 3709:
#.##.#####
##....#...
..##.#..#.
....#.....
#..#..#..#
.........#
.........#
##.##.#.#.
...###....
#####.#...

Tile 2381:
.....#.##.
#........#
....#..#..
...#.#..##
.......###
...#.....#
.##.......
....#.....
......#..#
#.#######.

Tile 3089:
.....#..##
#....###.#
........##
......##.#
#.#...#..#
....##...#
#...#.#...
##.......#
..#..#...#
#...####.#

Tile 3049:
##.#.##.##
.#...#..#.
.#..##..##
...##.....
....#...##
#......###
#...#..#..
#.......#.
........##
##.##..#.#

Tile 1171:
#..#.##...
.#.......#
##......#.
.##..#.#.#
#...#..#.#
.....#..#.
.#..#.#...
.#........
....##..#.
#.##...###

Tile 2903:
#....#####
..#....#..
..#...#.##
#...#....#
..##.#..##
.#.#..#..#
..........
#...#.##..
#.......##
###..###.#

Tile 3259:
#..######.
..##.#..#.
#..#....##
....#....#
#........#
.......#.#
##.#..#...
#..#...###
.....#...#
##...###.#

Tile 2083:
.#.#...#..
.#.......#
.........#
#......#..
#.....#...
....#...##
##....##..
.#.....#.#
.###......
...#..####

Tile 1019:
##...##..#
..#.#.....
#..#...#..
#......###
.........#
..##....##
####..#..#
#.#..#..#.
#..#....#.
.#.#.###..

Tile 2659:
..#....#.#
##.#...#..
.##...##.#
..#.#..#.#
#.##..#.#.
.......#..
#.##......
#..#.#..#.
..#....#.#
...#.###.#

Tile 1873:
##.#####.#
..#....#..
..........
.......#.#
..#....##.
.......#..
.#....#...
#.......##
#.#.......
#.#....#..

Tile 2851:
#.#..#..##
#.#...#.#.
##.....#..
#...#.....
.#....#...
....#..#..
...#....##
#.##..###.
.#..##.#.#
.#..#....#

Tile 3529:
####....##
.....##..#
...##.#.#.
#.#..###.#
#.#....##.
....#..###
#......#.#
##......##
#.#.....##
.#.####..#

Tile 2221:
.#...#.###
##.##..###
#.........
.........#
#........#
......#..#
......#...
..##..#..#
.....#.#.#
..#.######

Tile 3251:
####.#.##.
#..#....#.
#....#.#.#
.....##..#
..........
#...#..#..
....######
..#.#....#
...#....#.
##.#.#...#

Tile 2693:
..###.####
.#....#..#
..##......
##.##...##
.#....#...
#...#....#
##..#.#..#
.##......#
.##.###..#
###.#..#.#

Tile 1187:
.#..###.##
..#.#.#..#
#.#......#
...#..#..#
#.....##..
#......#.#
##.....#..
......#..#
..........
#..##.....

Tile 1237:
####....#.
.#........
.#..###..#
#.#.....#.
#........#
....#....#
..#...#..#
#...##....
.#.#.#...#
.##..#....

Tile 1163:
#.#..#.#..
...#.###.#
.#...#..#.
#...###...
...#......
...#..#...
#...#....#
#....#...#
#...##..#.
#.######..

Tile 2113:
.##.#..###
#.#..##..#
.......#..
#....#....
##........
#....#...#
......#...
#......#..
#...##...#
#.##..####

Tile 3989:
#..###.###
#.....#.##
#.........
##........
#.........
#..#......
.....#...#
......#...
.#..#.....
#..#######

Tile 3163:
##..#...#.
...#..#..#
##.#.....#
.#....#.#.
#...###.#.
#....#....
...#.....#
#..#.#...#
#..#......
..#..#####

Tile 2137:
####..##.#
...#......
........##
...#..#.##
#.#..#.#..
.#..##...#
.#.#.###..
#...#.....
...##....#
.#..#..#.#

Tile 1087:
.#.##.####
..###.#...
#...#.....
##.......#
#......#.#
..#.......
#.#...#...
#...#....#
#.#......#
.#..######

Tile 1613:
.##..#####
..#.####.#
#...#....#
.#...##.#.
#.#.....#.
#.#..#...#
#.#.......
.##.....##
.....#...#
#..#.##.##

Tile 3613:
#......###
.....#....
.........#
#.#......#
.###....##
.#..##.#.#
#...#....#
#......#..
.........#
....#.....

Tile 2293:
#......#.#
#.....##.#
.....#...#
#........#
.#....##.#
#.#..#.###
.#.....#..
.........#
#.#.......
#....##..#

Tile 3373:
#####...##
..#..#...#
.........#
...#......
##.#.....#
#.........
#.#....#.#
....#.....
..##.#..#.
..#.#.#..#

Tile 2539:
#.##.####.
#.##..#..#
#....#...#
#...##...#
.#....#..#
.#........
.......##.
#.....#...
.....#...#
.#.....#..

Tile 2833:
.#..#.##..
#.........
.........#
.#.###.#.#
##..####.#
.....#.#.#
...#.#....
.#...#....
#.........
..####..##

Tile 3019:
#....##..#
.....#...#
#..#..#.#.
..##.....#
..####...#
###...##..
#.#...##..
..##...#.#
.....##...
#.##...#..

Tile 3061:
.#...#..#.
....###...
....###.##
...#.#....
....#.#...
.....##...
#.......##
..#.##.#..
#.#....#..
###..##..#

Tile 2593:
#...####.#
...##..###
.....#.#..
#...##..#.
#..##.....
..........
#.......##
#...#....#
..#..#....
.#.#####.#

Tile 2617:
......###.
..#...#..#
.#...#...#
....#.....
#.....##.#
.#.....##.
..##......
..#.#....#
##.......#
##.##.##..

Tile 1823:
#####....#
....#...##
........##
.......###
..........
###.#.....
.......#.#
..#...#.#.
........#.
##.......#

Tile 3191:
.#.#..#.##
...#......
..#......#
#.#......#
...#...###
....##.#..
..###....#
#..#.#.#..
##.....#.#
#..#####..

Tile 3371:
###.##..##
.#..#..#..
....#.....
.......#..
.........#
#..##.....
.....##.#.
.##.##.#..
#........#
#.###..#..

Tile 1721:
.#.##.##..
##..#...#.
##........
#....###.#
..#.#...#.
.#.......#
#.....##..
#.......##
.#..#...#.
##.##.#..#

Tile 3011:
#.##.#.###
..........
.....##...
........##
#..#......
.#......#.
.......#..
#........#
#...#.....
......####

Tile 1801:
#.#.#.####
#..#.#....
.#...#..#.
.##...#..#
##........
#.#.##..##
##..#.....
#...#....#
##.##...#.
#######.#.

Tile 1129:
.###.##.##
.....#...#
.#........
##...#....
###..#.###
##........
#.###....#
.#......#.
......#...
#....#..#.

Tile 3517:
#..#.#..##
#.....#.##
...#.#...#
#..#.....#
##.#.....#
.#.....#.#
.##.###...
..........
#....#..#.
.######..#

Tile 3607:
##..#.#.##
#....#...#
#..##.....
.........#
..#.......
#...#.....
#....#..##
#....##...
#..#.#.#..
..########

Tile 2803:
..##.#.##.
...##....#
....#....#
..#..#.#.#
#..##.....
#....##..#
.....#...#
#...#.....
#...#.....
.#.#.#.#.#

Tile 3331:
.#####....
#.........
.#..#.....
....#.....
#......#..
#.......#.
...#.#....
#.........
#.......##
#.#..#####

Tile 3499:
#...#.#..#
.#........
#...####.#
.#..###...
#..##.##.#
.##.......
..........
....#..#.#
...###...#
..#....###

Tile 3299:
.......##.
..#.#.....
.#.....##.
#.........
..........
##........
#...#..#.#
...##.....
.......#.#
#.##.###.#

Tile 3793:
#.##.####.
#.........
#...#.....
#.#...#..#
#.#..#...#
....##.#..
##...##..#
......#..#
..........
.#.#######

Tile 2657:
#####.##..
##....####
...#.#....
....###.##
#.....#...
..........
#..#.#....
.#...#....
....###...
.#.....#..

Tile 2239:
..###..#.#
#.###.....
#..#.#..#.
#......##.
#.........
..........
#...##....
...#.#.#..
........##
#....#.#.#

Tile 2861:
#...#####.
........##
#.....#.#.
#........#
......#...
##..#..#..
.##......#
.#.##...##
..#......#
.....#.#.#

Tile 1061:
#....###.#
.......#.#
.#..###..#
.....#...#
.........#
#.....#..#
#.#......#
....#.....
##...#...#
#.#.###.##

Tile 1447:
#.###.##.#
#....##..#
#.#...#...
##......##
#.......##
##........
.#.#....##
.....##...
##..##...#
..###.#...

Tile 1997:
.#.#...##.
#....#.#..
..##..#...
#####.....
#....#....
#.........
..#..###.#
..##...#..
#....#.##.
....#..##.

Tile 2251:
..##.#...#
..........
..#....#..
#.#.#.#..#
#.#.....#.
##......#.
#..#.#####
.........#
#....#....
##.#.##.#.

Tile 3797:
####.#.###
...##.....
......#...
#....#..##
..#..###..
.#.....##.
#......##.
..###.....
.##.....##
..##.##.##

Tile 1669:
.#.#..#..#
#...#.....
#.#.......
#......###
#.....##.#
....#....#
.....#..##
...#..#..#
.....#....
###.#.....

Tile 2939:
#..#.###.#
#........#
###....#..
###...##..
#.##.#..##
.##..#....
#.......##
#.#...#..#
##......#.
..##...###

Tile 2411:
###..#.#.#
#...##....
##...#...#
.#.#..#...
#.....#...
#.#.##....
.......#.#
.###......
##...#.###
##.#.#.#.#

Tile 3469:
#.#..#...#
.........#
#.........
##.#####.#
......#...
..........
#........#
...#.....#
#........#
#..#.....#

Tile 2677:
.#.#.#..##
#...#.#..#
..........
...#..#..#
..........
..........
##.#.....#
#........#
#.....##.#
##.#..##..

Tile 3361:
.#..#...##
#.#....#..
...####...
.#...#...#
#..#....#.
#........#
#.##.....#
.#...#..##
##.....#..
##.....#.#

Tile 1567:
#...#.###.
#.#.#.....
#.###.#..#
..........
......#.##
#.........
.#...##...
###.##...#
#..#....#.
..###..#.#

Tile 1153:
##.#..##.#
####..#..#
#.........
....#...#.
#...#..#..
#........#
.#......#.
#......###
....####..
###...#.##

Tile 1063:
#.###..##.
.......#.#
......##.#
...#..#.##
#.....#.#.
.....#....
......#..#
.#......#.
#.......#.
#...#.####

Tile 3643:
#.#.##....
......##.#
#.....#...
.....##.##
#....##.##
......#...
.##....#.#
#..#...#..
..........
#...###.#.

Tile 2161:
####.###..
..#...###.
##.......#
#....#...#
#.....###.
..........
...#....#.
##......#.
......##..
#.#..####.

Tile 1373:
#########.
.#.#.....#
..........
#..#...#.#
#....#....
#....#..#.
..#.......
#.......##
#..#..###.
##...#....

Tile 2237:
.#..#...##
#..#.....#
#......#.#
....#..#..
.....#....
#..#.....#
###.......
#...#.....
#.........
##...#.#..

Tile 3319:
.##.####..
#.....#...
#..#......
.......#..
..........
#.#......#
#.....#...
#.##......
....#.#..#
#...#.##.#

Tile 1931:
###.....#.
...##.....
.........#
....#.#.#.
.....#....
....#.#...
##.......#
#....#.#.#
..........
####.#...#

Tile 2753:
#..##.....
.#.......#
#.....#...
.#.....#.#
##..#..#..
....#.#...
##.#.....#
.##..#....
......#...
.#......##

Tile 2273:
.#.######.
.#..#....#
#..#.##...
.#...##..#
..#.##....
#....#....
#...###.##
#...#....#
#......###
#.#.####.#

Tile 2131:
..#.##.#.#
........##
#.#..#...#
......#..#
#.....#..#
..........
.........#
...#.#..##
#.#.......
#.##.##..#

Tile 1259:
#....#.###
#........#
#...#.#..#
.#.#...#.#
...#.#...#
.#..#..#..
......#...
.#....####
#.....##..
.#.#.##..#

Tile 2837:
##.....###
#.#..#..##
#..##....#
#.........
#.........
#..#.#.#..
#.........
......##.#
#.......#.
##.###...#

Tile 3467:
#.#.##..##
#.#.#.#..#
#.#......#
##.#.....#
.......#.#
.#....####
.......#.#
#.#....#.#
....#..#..
#...##....

Tile 3833:
..#.###.##
#....###.#
#....#.#..
##......##
.........#
.........#
#...##..##
#......#..
#..#...#..
##.#.##.##

Tile 1559:
###.##..#.
#..####..#
.....##.##
#..#.....#
..........
#..###....
.#..#..#..
#.##..#.#.
#..#.#....
##.#....##

Tile 1483:
#.#.###..#
#..#...#.#
#.....#.#.
#........#
#...#..#.#
#.#..##.#.
#.#.##...#
......#.##
.....#..##
#.#.#.##.#

Tile 2711:
...###..#.
#..#......
........##
#.#...#..#
#.....#...
...#.##..#
#.........
##.##.....
#....#..#.
#.#####.##

Tile 1321:
...#.####.
....#...##
...#.#..#.
###....#.#
#....#.#..
#....#.#.#
..#....#.#
#.........
#...#....#
#.#..#.###

Tile 1637:
#.#...###.
.#......#.
#..#..#.#.
.#........
.#......##
####.....#
#.##.....#
###..#....
.##..#...#
##....####

Tile 2687:
..##....##
.#.....#.#
.#....#.##
#.#..#...#
...#.....#
#...#.....
#......##.
##.#..##.#
..##.#..##
###.######

Tile 2543:
...#####.#
#.#...#...
.......#..
.#..#.#.##
.#.#......
###..#...#
#..##...##
#.#.#.##..
.....#...#
#...#..##.

Tile 1487:
...#..###.
....#....#
...#...#..
##..#.#.#.
...#...#..
...#.#.#.#
#.........
#..##.#...
.#.#......
#...##.#.#

Tile 3929:
#.#.#.#.##
.#.##..#..
...##....#
....#.....
.....#...#
.#.#....##
.#..#.....
#..#......
##....#...
.#.###.#.#

Tile 3617:
##.##...#.
#..#..####
#.........
#..#....##
...#.....#
.#.......#
..#.......
.##..#...#
.##......#
#......##.

Tile 1069:
#.#.#...#.
##.#...###
##.......#
...#...#.#
#.#.....#.
#..#..#..#
#.###..#.#
#.##..##.#
.#......##
.#.###.##.

Tile 3863:
.#.#.....#
..#.#..#..
...#.#..#.
.....##...
#........#
#......##.
...#....##
.......###
....#.....
#####..###

Tile 1847:
.###.#....
#........#
#........#
#.#.#.....
##..#.#..#
#.....#..#
..#.#..#..
##...#.#..
#........#
###.#...##

Tile 1831:
.#.##.#..#
..#.#..###
#.#.......
#.........
.....#....
#.........
#....#..##
#......##.
#....#...#
...#..###.

Tile 3697:
....###..#
##.#..#..#
#.#...####
#.......#.
#.##.#....
#..#......
#.........
...#.....#
#.........
.######.##

Tile 1433:
..##.#.#.#
..#.....##
......##..
...#..##.#
....##....
#.#.#..#.#
....###...
#.........
..#...#...
.#.##....#

Tile 1987:
..##......
..#..#..#.
.........#
.....#....
..##.....#
.........#
....##...#
#......##.
#........#
..####..##

Tile 2389:
#.#.####.#
#.....#...
#....#....
#....#....
#...#.#..#
##.#...#..
.........#
#.....#...
#.#..#....
..##..####

Tile 3917:
.##.##....
#.#.....##
..#..#..#.
.#....####
##.#...#.#
.....#.#.#
........#.
#.###.....
.#........
.###..#.##

Tile 3533:
#.#...#.##
#.........
#.........
###.##....
.#.#..#.#.
..........
#....#...#
#...##...#
..#.##..##
..###.#.##

Tile 1471:
#...##..##
.#.##...#.
#.#.......
.......#..
#.#......#
#..##..#..
###....###
..#.#...#.
##......#.
.####.###.

Tile 1051:
#.#.##.##.
###....#.#
....#...##
..#...####
#.....####
#........#
#..#..#..#
#......##.
#...#.#.##
####.#..##

Tile 3407:
#.#..#.#.#
#........#
..#..##...
......#...
#.........
...#.....#
#.##..##.#
.......#..
#.......##
.....###..

Tile 3853:
###...#.##
#.........
.....##..#
..#......#
.....#...#
....#...#.
....#.....
#........#
.........#
.##.##..##

Tile 3079:
.#.#..###.
.....##...
.....###..
#....#.#..
#.#.##...#
#......#.#
#.....#..#
#........#
.##.#..###
#.#..##.#.

Tile 3449:
...##.#.##
.#...#....
#.......##
##.#.....#
#...#.#..#
..#.#....#
.#.......#
..#....#.#
...#.....#
..#.###.#.

Tile 2203:
..#.###...
#..#.....#
#.##.#..#.
........##
...#...#.#
.........#
#..#..##.#
#..##.###.
...#...#..
...###.###

Tile 3067:
#.####.##.
.....#...#
#..##...##
#.#......#
##..#..#.#
###...#...
..#.....##
..#......#
#.......##
#.#.#...##

Tile 3947:
...#......
###.......
.#...#..#.
#..#.....#
#.#.......
.##.......
.......#..
.#.#...###
.#.....#.#
.#......##

Tile 1091:
.##...##.#
.#.#....##
.........#
#........#
.#.......#
#.......##
#.........
.#......##
....#..###
..#...##..

Tile 1201:
.##.#....#
#......###
..#.#..#.#
#.....#..#
.#.#.##.##
##..#.##..
.#......##
##....#..#
..........
##.###....

Tile 2281:
##.#.....#
.#..#...#.
.#.....#..
##..#.#..#
#.#.#....#
..........
..##.#...#
.#...##..#
#...#.#...
###.#..###

Tile 3229:
#...###.##
##........
..##.#.###
.#.#..####
#.#.....##
...#......
#.#.#.#..#
#....#.###
#.....#.#.
#.##.##...

Tile 3739:
###.###.#.
#..#....##
#...#....#
.....#.#.#
.....#..##
..........
##.#.....#
###..#.#..
...#..#...
.#.....#.#

Tile 2069:
.##.#.####
#...#..#.#
...##.....
#...#.....
.##.......
#...#....#
.#....#..#
.#......##
#.....#..#
..#.##.#.#

Tile 2399:
####.#.#..
.#....#..#
#........#
#.#.##...#
.#....####
##.#...#..
#..#.##.#.
...#.#.#..
##.##..#..
##..#..###

Tile 2087:
..#..#....
..##.....#
#.#.......
###.......
...#...#..
..#.......
##....##..
#.#..##.##
..#.#.....
###...##.#

Tile 3203:
.#.##..#.#
#..##....#
#.......#.
#..#......
....##.##.
..........
..#..#...#
.#....##..
.....#.###
#.###..#..

Tile 3631:
#####.####
#.#..#...#
##......##
#.#..##..#
.#......#.
#.#...#...
....#....#
#.....##..
....##....
##..#...#.

Tile 1291:
.####..###
#...#.#...
.....#..##
#..#.##.#.
.##.......
....#....#
.........#
.#....#.#.
......#...
#...#...##

Tile 2377:
....#..#..
#...#..#.#
#...#.....
#........#
.....#....
##.......#
##........
#....#.##.
#..##....#
###..#....

Tile 1223:
##.#.###.#
#..#..#..#
.........#
#.#.......
...#......
...#...#..
#.#.......
.##.####..
...##.#..#
#.#..##.##

Tile 3343:
..#..#..##
.....##..#
#.....#...
.#.....#.#
....#..#..
........#.
.#.#..###.
##...##...
#..#..#..#
#....#..##

Tile 3001:
.#..#..#..
##.#....#.
#.#......#
.....##...
#..#..#...
..#.#..###
...#......
...#...#.#
.#...#...#
##.##.###.

Tile 3881:
.#...####.
#....###..
.#..#..#.#
...#.....#
#..#......
#...#...##
.#.####.##
#...#.#..#
.#........
#.#.###.##

Tile 2897:
#...#..#.#
........##
....#..#.#
#....##..#
....#...#.
......#.##
#.##.....#
.....##..#
.........#
.#..#.....

Tile 2819:
#......#.#
#...##....
.......#..
#..#......
...##..#.#
#........#
#........#
#..#..#..#
.#.##.##.#
#..###....

Tile 1597:
#######...
#.###....#
...###..#.
#.....#..#
..........
..#......#
#...###.##
#........#
.#.....#..
..#..#.##.

Tile 3461:
#.#..#..#.
...#..#..#
###.#.#...
.#..##....
..##.....#
.....#....
.........#
...#......
#...#....#
#.##.##.##

Tile 2843:
.#########
.........#
#.........
...#..##..
...##....#
..........
#..##....#
#.##......
.#.#..##..
..###.#.##

Tile 2309:
.#.#...##.
#.......##
.......#..
...#..#..#
.###...##.
##........
....#....#
#.#..#....
#.#..#..##
#...##.###

Tile 1951:
#..###..##
#...#..###
...###...#
##...###..
#.#......#
..#.##....
...#..##.#
##......#.
...#...###
.#.#.##..#

Tile 2027:
####.##..#
..#..#....
#.#......#
...#......
##.#.....#
...#...##.
#..#......
#.##...#.#
..#...##.#
.###......

Tile 1097:
.##.#.##..
..#..#.##.
...#..#...
#........#
##.#....#.
#...#..###
..#......#
#.........
..#......#
....###...

Tile 1181:
.###..####
#...##..#.
#.##.#..#.
#...#...#.
#...#.....
.#.....#.#
.........#
##........
....#....#
#..#.##..#

Tile 3637:
..####...#
.........#
#..##.#.#.
#...#...##
...###...#
...#.....#
..##.....#
..##..##..
#..#...#..
#.#...####

Tile 2957:
#####.####
.#....#...
.....#....
#..#..##.#
...#.##..#
#.....#.#.
.....#..##
#####....#
#..#.#...#
###..#...#

Tile 1381:
#.#...###.
..#..#..##
....#.#.#.
#....#.#.#
.###......
#....##...
#...#..#..
..#..#..#.
........#.
#.#.##..#.

Tile 2699:
..##.####.
..#..###.#
.#......#.
....#.#..#
.#..#....#
..##..##..
#.....#..#
###......#
#.#.###...
########.#

Tile 2333:
..#..#..##
.#....#.##
.....#....
...#.##...
#........#
....##..##
#....#.#.#
#.........
..#..#.##.
######.#.#

Tile 2467:
.##..#.##.
##...#....
........#.
..#..#..#.
##..####..
.#..#.#..#
..........
...#...#.#
.#........
.#..#.#...

Tile 1123:
#.######..
..#.#.....
.........#
#.........
....#..#.#
.....#..##
.....#....
#..###...#
#.#.##...#
##...#.###
"""

if __name__ == '__main__':
    if sys.argv[1] == "2":
        result = compute2(puzzle_input)
    else:
        result = compute(puzzle_input)

    print(f"Result is {result}")
